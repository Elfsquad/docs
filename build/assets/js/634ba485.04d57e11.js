"use strict";(self.webpackChunkelfsquad=self.webpackChunkelfsquad||[]).push([["42801"],{76745:function(e,t,r){r.r(t),r.d(t,{frontMatter:()=>o,default:()=>p,toc:()=>h,metadata:()=>n,assets:()=>l,contentTitle:()=>d});var n=JSON.parse('{"id":"configurator/guides/python-dynamic-groups","title":"\uD83D\uDCCA Dynamic groups with Python","description":"Dynamic groups in the EMS allow you to create programmatically populated groups based on custom criteria.","source":"@site/docs/configurator/guides/python-dynamic-groups.mdx","sourceDirName":"configurator/guides","slug":"/configurator/guides/python-dynamic-groups","permalink":"/docs/configurator/guides/python-dynamic-groups","draft":false,"unlisted":false,"editUrl":"https://github.com/elfsquad/docs/edit/main/docs/configurator/guides/python-dynamic-groups.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"\uD83D\uDCCA Dynamic groups with Python","sidebar_position":2,"sidebar_label":"Dynamic groups with Python","slug":"./python-dynamic-groups"},"sidebar":"configuratorSidebar","previous":{"title":"Generating 2D Step Images","permalink":"/docs/configurator/guides/generating-2d-step-images"},"next":{"title":"elfsquad/authentication","permalink":"/docs/configurator/libraries/elfsquad-authentication-library"}}'),i=r(85893),s=r(50065),a=r(90291),c=r(88878);let o={title:"\uD83D\uDCCA Dynamic groups with Python",sidebar_position:2,sidebar_label:"Dynamic groups with Python",slug:"./python-dynamic-groups"},d=void 0,l={},h=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"1. Create a Python dynamic group",id:"1-create-a-python-dynamic-group",level:2},{value:"2. Write the Python script",id:"2-write-the-python-script",level:2},{value:"3. Result",id:"3-result",level:2},{value:"4. Important concepts",id:"4-important-concepts",level:2},{value:"Script Entry Point",id:"script-entry-point",level:3},{value:"Variable Properties",id:"variable-properties",level:3},{value:"Return Format",id:"return-format",level:3},{value:"Error Handling",id:"error-handling",level:3}];function u(e){let t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Dynamic groups in the EMS allow you to create programmatically populated groups based on custom criteria."}),"\n",(0,i.jsx)(t.p,{children:"This guide demonstrates how to use Python to create dynamic groups that fetch and integrate data from external APIs."}),"\n",(0,i.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Access to EMS"}),"\n",(0,i.jsx)(t.li,{children:"Basic Python knowledge"}),"\n",(0,i.jsx)(t.li,{children:"Understanding of REST APIs"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"1-create-a-python-dynamic-group",children:"1. Create a Python dynamic group"}),"\n",(0,i.jsxs)(t.p,{children:["In this example, we will create a dynamic group that retrieves the latest exchange rates from ",(0,i.jsx)(t.a,{href:"https://api.frankfurter.dev/",children:"https://api.frankfurter.dev/"}),"\nand adds the rates to the group."]}),"\n",(0,i.jsx)(t.p,{children:"In the screenshot below, you can see that we created 2 groups: Currency and Rates. The\nCurrency group contains the currency codes."}),"\n",(0,i.jsx)("img",{src:"/img/configurator/guides/python-dynamic-groups/1.png",style:{maxWidth:600}}),"\n",(0,i.jsx)(t.p,{children:"Next, we create a Python dynamic group that retrieves the exchange rates for\nthe currencies in the Currency group and adds them to the Rates group."}),"\n",(0,i.jsx)(t.p,{children:"Creating a Python dynamic group works the same way as creating a regular dynamic group in the EMS. Instead of adding\nproperty filters, you add a Python script that defines the group's criteria and results."}),"\n",(0,i.jsxs)(t.p,{children:["To create a dynamic group, we click on the Plus icon next to the Rates group. In the filters section, we click on the\n",(0,i.jsx)(t.code,{children:"Open Python editor"})," button. This opens the Python editor where we can write the Python script."]}),"\n",(0,i.jsx)(t.h2,{id:"2-write-the-python-script",children:"2. Write the Python script"}),"\n",(0,i.jsxs)(t.p,{children:["First, we add a variable reference to the Currency group. This allows us to access the currency codes in the Currency group.\nClick on the ",(0,i.jsx)(t.code,{children:"+ Add variable"})," button and select the Currency group. Ensure the ",(0,i.jsx)(t.code,{children:"Children"})," option is selected. This will\ncreate a variable that contains a list of all the children in the Currency group."]}),"\n",(0,i.jsx)("img",{src:"/img/configurator/guides/python-dynamic-groups/2.png",style:{maxWidth:600}}),"\n",(0,i.jsxs)(t.p,{children:["Next, we write the Python script that retrieves the exchange rates for the currency codes in the Currency group. The script\nuses the ",(0,i.jsx)(t.code,{children:"requests"})," library to make a GET request to the API and retrieve the exchange rates. The exchange rates are then\nadded to the Rates group."]}),"\n",(0,i.jsxs)(a.k,{children:[(0,i.jsx)(a.B,{highlight:"{3-3}",children:(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"def invoke(args):"})," function is the entry point for the Python script. The ",(0,i.jsx)(t.code,{children:"args"})," parameter contains the variables\nyou defined in the Python editor. In this example, we have a variable called ",(0,i.jsx)(t.code,{children:"@Currency"})," that contains the currency codes."]})}),(0,i.jsxs)(a.B,{highlight:"{6-6}",children:[(0,i.jsxs)(t.p,{children:["To get the selected currency, we use a list comprehension to find the currency code that has the ",(0,i.jsx)(t.code,{children:"selected"})," property set."]}),(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"args['@Currency']"})," variable contains a list of dictionaries with the currency codes. The object corresponds to the features\nin the model."]}),(0,i.jsxs)(t.p,{children:["The standard properties on a variable are ",(0,i.jsx)(t.code,{children:"id"}),", ",(0,i.jsx)(t.code,{children:"name"}),", ",(0,i.jsx)(t.code,{children:"selected"})," and ",(0,i.jsx)(t.code,{children:"value"}),"."]}),(0,i.jsx)(t.p,{children:"If the corresponding feature has custom properties, these will be added to the dictionary as well, and can be accessed by their name."})]}),(0,i.jsxs)(a.B,{highlight:"{16-17}",children:[(0,i.jsx)(t.p,{children:"After querying the API, we check if the response status code is 200. If it is, we extract the exchange rates from the response and return them as a list of dictionaries."}),(0,i.jsxs)(t.p,{children:["The result of the ",(0,i.jsx)(t.code,{children:"invoke"})," function should be a list of dictionaries, where each dictionary represents an item in the dynamic group."]}),(0,i.jsxs)(t.p,{children:["There are 2 required properties for each item in the result: ",(0,i.jsx)(t.code,{children:"id"})," and ",(0,i.jsx)(t.code,{children:"name"}),". The ",(0,i.jsx)(t.code,{children:"id"})," property is used to uniquely identify the item, and the ",(0,i.jsx)(t.code,{children:"name"})," property is displayed in the group."]}),(0,i.jsx)(t.p,{children:"Additionality you can add custom properties to the dictionary, which can be used in formulas and conditions."})]}),(0,i.jsx)(c.default,{language:"python",children:`import requests

def invoke(args):

  # Get the selected currency
  currency = next((c['name'] for c in args['@Currency'] if c['selected']), None)

  # If no currency is selected, return an empty list
  if currency is None:
      return []

  # Get the exchange rates 
  response = requests.get(f'https://api.frankfurter.dev/v1/latest?base={currency}')
  if response.status_code == 200:
      rates = response.json()['rates']
      result = [{'id': name, 'name': f'{name} = {rate}'} for name, rate in rates.items()]
      return result
  
  # If the request fails, return an empty list
  return []
`})]}),"\n",(0,i.jsx)(t.h2,{id:"3-result",children:"3. Result"}),"\n",(0,i.jsx)(t.p,{children:"After saving the Python script, the dynamic group will retrieve the exchange rates for the selected currency codes in the\nCurrency group. The rates will be displayed in the Rates group."}),"\n",(0,i.jsx)("img",{src:"/img/configurator/guides/python-dynamic-groups/3.png",style:{maxWidth:600}}),"\n",(0,i.jsx)(t.h2,{id:"4-important-concepts",children:"4. Important concepts"}),"\n",(0,i.jsx)(t.h3,{id:"script-entry-point",children:"Script Entry Point"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.code,{children:"invoke(args)"})," function serves as the entry point"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"args"})," contains all defined variables (e.g., args['@Currency'])"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"variable-properties",children:"Variable Properties"}),"\n",(0,i.jsx)(t.p,{children:"Each variable object includes these standard properties:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"id"}),": Unique identifier"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"name"}),": Display name"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"selected"}),": Selection state"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"value"}),": Associated value"]}),"\n",(0,i.jsx)(t.li,{children:"Custom properties (if defined on the feature)"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"return-format",children:"Return Format"}),"\n",(0,i.jsx)(t.p,{children:"The script must return a list of dictionaries with:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Required fields:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"id"}),": Unique identifier for the item"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"name"}),": Display text in the group"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.li,{children:"Optional: Additional custom properties for use in formulas/conditions"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Return an empty list [] when:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"No source data is available"}),"\n",(0,i.jsx)(t.li,{children:"API requests fail"}),"\n",(0,i.jsx)(t.li,{children:"Invalid or missing data"}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){let{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},34643:function(e,t,r){r.d(t,{Z:()=>i});var n=r(85893);function i(e){return(0,n.jsx)(n.Fragment,{children:e.children})}r(67294)},90291:function(e,t,r){r.d(t,{B:()=>a,k:()=>c});var n=r(67294),i=r(34643),s=r(88878);let a=e=>{let{children:t}=e;return n.createElement("div",null,t)},c=e=>{let{children:t}=e,[r,c]=(0,n.useState)(null),[d,l]=(0,n.useState)(""),[h,u]=(0,n.useState)(-1),p=n.Children.toArray(t).filter(e=>n.isValidElement(e)),g=p.find(e=>e.type===s.default||e.type===i.Z),m=p.filter(e=>e.type===a),y=n.useRef(null),f=m.map(()=>n.useRef(null)),x=()=>{if(!y.current)return;let e=y.current.getBoundingClientRect(),t=window.innerHeight||document.documentElement.clientHeight;c(Math.floor(Math.max(0,Math.min(e.bottom,t)-Math.max(e.top,0)))-32)},j=e=>{var t;if(!(null==(t=m[e])?void 0:t.props.highlight)||e<0||e>=m.length||e==h||(u(e),l(m[e].props.highlight),!y.current))return;let r=y.current.getElementsByClassName("theme-code-block-highlighted-line");r.length>0&&setTimeout(()=>{y.current&&(y.current.scrollTop=r[0].offsetTop-24)},200)},v=()=>{let e=window.scrollY+o(),t=f.findIndex(t=>!!t.current&&t.current.offsetTop>e);t!=h&&j(t)};return(0,n.useEffect)(()=>(x(),window.removeEventListener("scroll",v),window.addEventListener("scroll",v,{passive:!0}),j(0),()=>window.removeEventListener("scroll",v)),[]),n.createElement("div",{className:"codedoc-container"},n.createElement("div",null,m.map((e,t)=>n.createElement("div",{key:t,ref:f[t],className:`codedoc-section ${h==t?"active":""}`,onClick:()=>j(t)},n.createElement(a,Object.assign({},e.props))))),n.createElement("div",{ref:y,style:{height:`${r}px`,top:`${o()}px`},className:"codedoc-code-container"},g&&n.createElement(s.default,Object.assign({},g.props,{metastring:d,key:d}))))},o=()=>{if("undefined"==typeof getComputedStyle)return 0;let e=getComputedStyle(document.documentElement).getPropertyValue("--ifm-navbar-height");return e?e.includes("px")?parseInt(e.replace("px","")):e.includes("rem")?Math.floor(parseInt(e.replace("rem",""))*parseFloat(getComputedStyle(document.documentElement).fontSize)):0:0}}}]);