"use strict";(self.webpackChunkelfsquad=self.webpackChunkelfsquad||[]).push([["66850"],{43877:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>l,default:()=>y,toc:()=>h,Content:()=>m,metadata:()=>r,assets:()=>g,contentTitle:()=>p});var r=JSON.parse('{"id":"configurator/libraries/configurator-library","title":"configurator-library","description":"const configurationCategoryName = \'Configuration\';","source":"@site/docs/configurator/libraries/configurator-library.mdx","sourceDirName":"configurator/libraries","slug":"/configurator/libraries/elfsquad-configurator-library","permalink":"/docs/configurator/libraries/elfsquad-configurator-library","draft":false,"unlisted":false,"editUrl":"https://github.com/elfsquad/docs/edit/main/docs/configurator/libraries/configurator-library.mdx","tags":[],"version":"current","frontMatter":{"sidebar_label":"elfsquad/configurator","slug":"elfsquad-configurator-library"},"sidebar":"configuratorSidebar","previous":{"title":"elfsquad/authentication","permalink":"/docs/configurator/libraries/elfsquad-authentication-library"},"next":{"title":"elfsquad/showroom-iframe","permalink":"/docs/configurator/libraries/elfsquad-showroom-iframe-library"}}'),i=n(85893),o=n(50065);let a=[{methodName:"constructor",description:"Initializes a new instance with the provided options.",example:{content:"import { ConfiguratorContext, AuthenticationMethod } from '@elfsquad/configurator';\n\nconst context = new ConfiguratorContext({\n  authenticationMethod: AuthenticationMethod.ANONYMOUS,\n  tenantId: 'your-tenant-id',\n});\n",language:"typescript"},parameters:[{name:"_options",type:"IConfiguratorOptions",description:"The options that are used to configure the context.",required:!0,parameters:[{name:"authenticationMethod",type:"AuthenticationMethod | undefined",description:"The authentication method that should be used. The default is ANONYMOUS.",required:!1},{name:"tenantId",type:"string | undefined",description:"The tenant id of the tenant that the configurator should be loaded for. This is required when the authentication method is ANONYMOUS or ANONYMOUS_AND_USER_LOGIN.",required:!1},{name:"tenantDomain",type:"string | undefined",description:"The registered showroom domain of the tenant. This is required for all ANONYMOUS requests.",required:!1},{name:"authenticationContext",type:"AuthenticationContext | undefined",description:"Optionally use your own authentication context, if you are already using the @link{elfsquad/authentication} package.",required:!1},{name:"authenticationOptions",type:"IAuthenticationOptions | undefined",description:"Optionally provide authentication options to override the defaults.",required:!1},{name:"apiUrl",type:"string | undefined",description:"Define the base url of the configurator. Defaults to api.elfsquad.io.",required:!1}]}],deprecated:null,returns:{type:"void",description:""}},{methodName:"getConfigurationModels",description:"Retrieve the available configuration models, categories & languages for the current showroom & user.",example:{content:"const context = new ConfiguratorContext();\nconst configurationModels = await context.getConfigurationModels();\nconsole.log('Models: ', configurationModels.features);\nconsole.log('Categories: ', configurationModels.categories);\nconsole.log('Languages: ', configurationModels.languages);\n",language:"typescript"},parameters:[{name:"languageIso",type:"string | undefined",description:"the language iso will be used for setting feature texts in the DTO.",required:!1,parameters:[]}],deprecated:null,returns:{type:"Promise<ConfigurationModels>",description:"DTO containing the configuration models, categories & languages."}},{methodName:"newConfiguration",description:"Start a new configuration with the provided feature model id, feature model name or configuration code.",example:{content:"const context = new ConfiguratorContext();\nconst feautureModelName = 'YourFeatureModelName';\nconst configuration = await context.newConfiguration(feautureModelName);\n",language:"typescript"},parameters:[{name:"name",type:"string",description:"The feature model id, feature model name or configuration code.",required:!0,parameters:[]},{name:"language",type:"string",description:"The language to start the configuration in.",required:!0,parameters:[]},{name:"preview",type:"boolean",description:"Whether the configuration should be started in preview mode.",required:!0,parameters:[]},{name:"includeSearchbarResults",type:"boolean",description:"Whether results in display type searchbar should be included or not.",required:!0,parameters:[]}],deprecated:null,returns:{type:"Promise<Configuration>",description:"The new configuration."}},{methodName:"openConfiguration",description:"Open an existing configuration with the provided configuration id or configuration code.",example:{content:"const context = new ConfiguratorContext();\nconst configurationId = 'YourConfigurationId';\nconst configuration = await context.openConfiguration(configurationId);\n",language:"typescript"},parameters:[{name:"configurationId",type:"string",description:"The configuration id or configuration code.",required:!0,parameters:[]},{name:"includeSearchbarResults",type:"boolean",description:"Whether results in display type searchbar should be included or not.",required:!0,parameters:[]}],deprecated:null,returns:{type:"Promise<Configuration>",description:"The opened configuration."}},{methodName:"getSettings",description:"Retrieve the settings for the current showroom.",example:{content:"const context = new ConfiguratorContext();\nconst settings = await context.getSettings();\nconsole.log('Settings: ', settings);\n",language:"typescript"},parameters:[{name:"language",type:"string",description:"The language is used for retrieving localized texts.",required:!0,parameters:[]}],deprecated:null,returns:{type:"Promise<Settings>",description:"The settings for the current showroom & user."}},{methodName:"getLayout2d",description:"Retrieve the 2D layout for a coniguration. The 2dlayout can be used for visualizing the configuration in a 2D view.",example:{content:"const context = new ConfiguratorContext();\nconst layout2d = await context.getLayout2d();\nconsole.log('Layout2d: ', layout2d);\n",language:"typescript"},parameters:[{name:"configurationId",type:"string | null",description:"The configuration id. If not provided, the root configuration id will be used.",required:!0,parameters:[]},{name:"stepId",type:"string",description:"The step id.",required:!0,parameters:[]}],deprecated:null,returns:{type:"Promise<Layout2d[]>",description:"The 2D layout for the configuration."}},{methodName:"getLayout3d",description:"Retrieve the 3D layout for a coniguration. The 3dlayout can be used for visualizing the configuration in a 3D view.",example:{content:"const context = new ConfiguratorContext();\nconst layout3d = await context.getLayout3d();\nconsole.log('Layout3d: ', layout3d);\n",language:"typescript"},parameters:[{name:"configurationId",type:"string | null",description:"The configuration id. If not provided, the root configuration id will be used.",required:!0,parameters:[]}],deprecated:null,returns:{type:"Promise<Layout3d[]>",description:"The 3D layout for the configuration."}},{methodName:"getLinkedConfigurationOverview",description:"Retrieve the linked configuration overview for the current root configuration. This overview can be used to display a navigator for the linked configurations.",example:{content:"const context = new ConfiguratorContext();\nconst linkedConfigurationOverview = await context.getLinkedConfigurationOverview();\nconsole.log('LinkedConfigurationOverview: ', linkedConfigurationOverview);\n",language:"typescript"},parameters:[],deprecated:null,returns:{type:"Promise<LinkedConfigurationOverview>",description:"The linked configuration overview for the current root configuration."}},{methodName:"getOverview",description:"Retrieve the overview for the current configuration. The overview can be used to display a summary of the configuration, for example on the checkout page.",example:{content:"const context = new ConfiguratorContext();\nconst overview = await context.getOverview();\nconsole.log('Overview: ', overview);\n",language:"typescript"},parameters:[{name:"configurationId",type:"string | null",description:"The configuration id. If not provided, the root configuration id will be used.",required:!0,parameters:[]}],deprecated:null,returns:{type:"Promise<OverviewGroups[]>",description:"The overview for the configuration."}},{methodName:"onUpdate",description:"Registers a callback function that will be called whenever a configuration is updated.",example:{content:"import { ConfiguratorContext, Configuration } from '@elfsquad/configurator';\nconst context = new ConfiguratorContext();\n\nconst callback = (evt: CustomEvent<Configuration>) => {\n console.log('Configuration updated: ', evt.detail);\n};\ncontext.onUpdate(callback);\n",language:"typescript"},parameters:[{name:"f",type:"(evt: CustomEvent) => void",description:"The callback function that will be registered.",required:!0,parameters:[]}],deprecated:null,returns:{type:"void",description:""}},{methodName:"requestQuote",description:"Request a quote for the current root configuration. This endpoint should be used when anonymous users want to request a quote.",example:{content:"const context = new ConfiguratorContext();\nconst quotationRequest = {\n  email: 'john.doe@gmail.com',\n  firstName: 'John',\n  lastName: 'Doe',\n}\nawait context.requestQuote(quotationRequest);\n",language:"typescript"},parameters:[{name:"quotationRequest",type:"QuotationRequest",description:"The quotation request.",required:!0,parameters:[{name:"firstName",type:"string",description:"",required:!1},{name:"lastName",type:"string",description:"",required:!1},{name:"lastNamePrefix",type:"string",description:"",required:!1},{name:"salutation",type:"string",description:"",required:!1},{name:"email",type:"string",description:"",required:!1},{name:"city",type:"string",description:"",required:!1},{name:"postalCode",type:"string",description:"",required:!1},{name:"streetName",type:"string",description:"",required:!1},{name:"houseNumber",type:"string",description:"",required:!1},{name:"countryIso",type:"string",description:"",required:!1},{name:"languageIso",type:"string",description:"",required:!1},{name:"phoneNumber",type:"string",description:"",required:!1},{name:"phoneNumber2",type:"string",description:"",required:!1},{name:"companyName",type:"string",description:"",required:!1},{name:"iban",type:"string",description:"",required:!1},{name:"cocNumber",type:"string",description:"",required:!1},{name:"vatNumber",type:"string",description:"",required:!1},{name:"shipto_firstName",type:"string",description:"",required:!1},{name:"shipto_lastName",type:"string",description:"",required:!1},{name:"shipto_lastNamePrefix",type:"string",description:"",required:!1},{name:"shipto_salutation",type:"string",description:"",required:!1},{name:"shipto_email",type:"string",description:"",required:!1},{name:"shipto_city",type:"string",description:"",required:!1},{name:"shipto_postalCode",type:"string",description:"",required:!1},{name:"shipto_streetName",type:"string",description:"",required:!1},{name:"shipto_houseNumber",type:"string",description:"",required:!1},{name:"shipto_countryIso",type:"string",description:"",required:!1},{name:"shipto_languageIso",type:"string",description:"",required:!1},{name:"shipto_phoneNumber",type:"string",description:"",required:!1},{name:"shipto_phoneNumber2",type:"string",description:"",required:!1},{name:"shipto_companyName",type:"string",description:"",required:!1},{name:"remarks",type:"string",description:"",required:!1}]}],deprecated:null,returns:{type:"void",description:""}},{methodName:"addToQuotation",description:"Add the current configuration to a quotation. This endpoint should be used when a user is logged in and wants to add a configuration to a quotation.",example:{content:"const context = new ConfiguratorContext();\nconst quotationId = 'YourQuotationId';\nawait context.addToQuotation(quotationId);\n",language:"typescript"},parameters:[{name:"quotationId",type:"string",description:"The quotation id.",required:!0,parameters:[]},{name:"configurationIds",type:"string[]",description:"The configuration ids. If not provided, the root configuration id will be used.",required:!0,parameters:[]}],deprecated:null,returns:{type:"void",description:""}},{methodName:"_get",description:"",example:null,parameters:[{name:"url",type:"string",description:"",required:!0,parameters:[]}],deprecated:null,returns:{type:"Promise<Response>",description:""}},{methodName:"_put",description:"",example:null,parameters:[{name:"url",type:"string",description:"",required:!0,parameters:[]},{name:"object",type:"any",description:"",required:!0,parameters:[]}],deprecated:null,returns:{type:"Promise<Response>",description:""}},{methodName:"_updateConfiguration",description:"",example:null,parameters:[{name:"configuration",type:"Configuration",description:"",required:!0,parameters:[]}],deprecated:null,returns:{type:"void",description:""}}],s=[{methodName:"constructor",description:"",example:null,parameters:[{name:"configuratorContext",type:"ConfiguratorContext",description:"",required:!0,parameters:[]},{name:"data",type:"object",description:"",required:!0,parameters:[]}],deprecated:null,returns:{type:"void",description:""}},{methodName:"updateRequirement",description:"Updates a requirement on the this configuration. This can be used to (de)select a feature or set a value on a feature.",example:{content:"const nodeId = '00000000-0000-0000-0000-000000000000';\nconst value = 1;\nconst isSelection = true;\n\nawait configuration.updateRequirement(nodeId, isSelection, value);\n",language:"typescript"},parameters:[{name:"featureModelNodeId",type:"string",description:"The id of the feature model node to update",required:!0,parameters:[]},{name:"isSelection",type:"boolean",description:"Whether the feature should be selected or not",required:!0,parameters:[]},{name:"value",type:"number",description:"The value to set on the feature",required:!0,parameters:[]},{name:"ignoreConflicts",type:"boolean",description:"If ture, the API will try to automatically resolve conflicts.",required:!0,parameters:[]},{name:"includeSearchbarResults",type:"boolean",description:"If true, the API will include results in the display type searchbar.",required:!0,parameters:[]}],deprecated:null,returns:{type:"Promise<void>",description:"A promise that resolves when the requirement has been updated"}},{methodName:"updateText",description:"Updates the text value of a feature on this configuration.",example:{content:"const nodeId = '00000000-0000-0000-0000-000000000000';\nconst textValue = 'Hello World';\nawait configuration.updateText(nodeId, textValue);\n",language:"typescript"},parameters:[{name:"featureModelNodeId",type:"string",description:"The id of the feature model node to update",required:!0,parameters:[]},{name:"textValue",type:"string",description:"The text value to set on the feature",required:!0,parameters:[]}],deprecated:null,returns:{type:"Promise<void>",description:"A promise that resolves when the text value has been updated"}},{methodName:"updateImage",description:"Updates the image value of a feature on this configuration.",example:{content:"const nodeId = '00000000-0000-0000-0000-000000000000';\nconst textValue = 'https://example.com/image.png';\nawait configuration.updateImage(nodeId, textValue);\n",language:"typescript"},parameters:[{name:"featureModelNodeId",type:"string",description:"The id of the feature model node to update",required:!0,parameters:[]},{name:"textValue",type:"string",description:"The image value to set on the feature",required:!0,parameters:[]}],deprecated:null,returns:{type:"Promise<void>",description:"A promise that resolves when the image value has been updated"}},{methodName:"updateName",description:"Updates the name of this or a linked configuration.",example:{content:"const name = 'My new configuration name';\nawait configuration.updateName(name);\n",language:"typescript"},parameters:[{name:"name",type:"string",description:"The new name of the configuration",required:!0,parameters:[]},{name:"linkedConfigurationId",type:"string | null",description:"The id of the linked configuration to update",required:!0,parameters:[]}],deprecated:null,returns:{type:"Promise<void>",description:"A promise that resolves when the name has been updated"}},{methodName:"updateCardinality",description:"Updates the cardinality of a linked configuration.",example:{content:"const parentNodeId = '00000000-0000-0000-0000-000000000000';\nconst newCardinality = 2;\nawait configuration.updateCardinality(parentNodeId, newCardinality);\n",language:"typescript"},parameters:[{name:"parentNodeId",type:"string",description:"The id of the parent node of the linked configuration",required:!0,parameters:[]},{name:"cardinality",type:"number",description:"The new cardinality of the linked configuration",required:!0,parameters:[]}],deprecated:null,returns:{type:"Promise<void>",description:"A promise that resolves when the cardinality has been updated"}},{methodName:"changeLanguage",description:"Changes the language of this configuration.",example:{content:"const languageIso = 'en';\nawait configuration.changeLanguage(languageIso);\n",language:"typescript"},parameters:[{name:"languageIso",type:"string",description:"The ISO code of the language to change to",required:!0,parameters:[]}],deprecated:null,returns:{type:"Promise<void>",description:"A promise that resolves when the language has been changed successfully"}},{methodName:"getStepImage",description:"Retrieves a rendered image of a step in this configuration.",example:{content:"const stepId = '00000000-0000-0000-0000-000000000000';\nconst size = 1080;\nconst background = true;\nconst image = await configuration.getStepImage(stepId, size, background);\n",language:"typescript"},parameters:[{name:"stepId",type:"string",description:"The id of the step to render",required:!0,parameters:[]},{name:"size",type:"number",description:"The size of the image to render",required:!0,parameters:[]},{name:"background",type:"boolean",description:"Whether to render the background or not",required:!0,parameters:[]}],deprecated:"use getLayout2d on the ConfiguratorContext instead",returns:{type:"Promise<Blob>",description:"A promise that resolves with the rendered image"}},{methodName:"getPdf",description:"Retrieves the PDF document for this configuration.",example:{content:"const context = new ConfiguratorContext();\nconst pdf = await configuration.getPdf();\n",language:"typescript"},parameters:[],deprecated:null,returns:{type:"Promise<Blob>",description:"A promise that resolves with the PDF document"}}];var d=n(49679),u=n(58784),c=n(83012);let l={sidebar_label:"elfsquad/configurator",slug:"elfsquad-configurator-library"},p="@elfsquad/configurator",g={},m=({children:e})=>(0,i.jsxs)("div",{class:"space-y-32",children:[(0,i.jsxs)("div",{class:"flex justify-between items-center",children:[e,(0,i.jsx)(c.default,{to:"https://github.com/elfsquad/configurator",children:(0,i.jsxs)("button",{class:"bg-gray-700 text-white px-4 py-2 rounded-md flex items-center gap-2 mt-[-18px]",children:[(0,i.jsx)("img",{src:"/img/github-mark-white.svg",style:{height:24,padding:0}}),"View on GitHub"]})})]}),(0,i.jsx)(u.N,{name:"ConfiguratorContext",description:"The ConfiguratorContext class is a wrapper around the Elfsquad configurator API. The class contains methods to start  visualize configurations."}),a.map(e=>(0,i.jsx)(d.uW,{...e})),(0,i.jsx)(u.N,{name:"Configuration",description:"The Configuration class is returned by the ConfiguratorContext and is used for managing the configuration state  updating the configuration."}),s.map(e=>(0,i.jsx)(d.uW,{...e}))]}),h=[{value:"ConfiguratorContext",id:"configuratorcontext",level:2},{value:"constructor",id:"constructor",level:3},{value:"getConfigurationModels",id:"getconfigurationmodels",level:3},{value:"newConfiguration",id:"newconfiguration",level:3},{value:"openConfiguration",id:"openconfiguration",level:3},{value:"getLayout3d",id:"getlayout3d",level:3},{value:"getLayout2d",id:"getlayout2d",level:3},{value:"getSettings",id:"getsettings",level:3},{value:"getOverview",id:"getoverview",level:3},{value:"onUpdate",id:"onupdate",level:3},{value:"requestQuote",id:"requestquote",level:3},{value:"Configuration",id:"configuration",level:2},{value:"updateRequirement",id:"updaterequirement",level:3},{value:"updateText",id:"updatetext",level:3},{value:"updateImage",id:"updateimage",level:3},{value:"changeLanguage",id:"changelanguage",level:3},{value:"getStepImage",id:"getstepimage",level:3},{value:"getPdf",id:"getpdf",level:3}];function f(e){let t={h1:"h1",h2:"h2",h3:"h3",header:"header",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(m,{children:(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"elfsquadconfigurator",children:"@elfsquad/configurator"})})}),"\n",(0,i.jsxs)("div",{class:"hidden",children:[(0,i.jsx)(t.h2,{id:"configuratorcontext",children:"ConfiguratorContext"}),(0,i.jsx)(t.h3,{id:"constructor",children:"constructor"}),(0,i.jsx)(t.h3,{id:"getconfigurationmodels",children:"getConfigurationModels"}),(0,i.jsx)(t.h3,{id:"newconfiguration",children:"newConfiguration"}),(0,i.jsx)(t.h3,{id:"openconfiguration",children:"openConfiguration"}),(0,i.jsx)(t.h3,{id:"getlayout3d",children:"getLayout3d"}),(0,i.jsx)(t.h3,{id:"getlayout2d",children:"getLayout2d"}),(0,i.jsx)(t.h3,{id:"getsettings",children:"getSettings"}),(0,i.jsx)(t.h3,{id:"getoverview",children:"getOverview"}),(0,i.jsx)(t.h3,{id:"onupdate",children:"onUpdate"}),(0,i.jsx)(t.h3,{id:"requestquote",children:"requestQuote"}),(0,i.jsx)(t.h2,{id:"configuration",children:"Configuration"}),(0,i.jsx)(t.h3,{id:"updaterequirement",children:"updateRequirement"}),(0,i.jsx)(t.h3,{id:"updatetext",children:"updateText"}),(0,i.jsx)(t.h3,{id:"updateimage",children:"updateImage"}),(0,i.jsx)(t.h3,{id:"changelanguage",children:"changeLanguage"}),(0,i.jsx)(t.h3,{id:"getstepimage",children:"getStepImage"}),(0,i.jsx)(t.h3,{id:"getpdf",children:"getPdf"})]})]})}function y(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}},58784:function(e,t,n){n.d(t,{N:()=>i});var r=n(85893);let i=e=>{let{name:t,description:n}=e,i=t.toLowerCase();return(0,r.jsxs)("div",{children:[(0,r.jsx)("h2",{id:i,children:t}),(0,r.jsx)("p",{children:n}),(0,r.jsx)("hr",{className:"bg-gray-600"})]})}},49679:function(e,t,n){n.d(t,{uW:()=>p});var r=n(85893),i=n(67294),o=n(88878);let a=e=>{let{name:t,parameters:n}=e,i="";for(let e=0;e<n.length;e++)i+=n[e].name,n[e].required||(i+="?"),e<n.length-1&&(i+=", ");let o=t.replace(/\./g,"").toLowerCase();return(0,r.jsxs)("h3",{id:o,className:"sticky z-10 bg-adaptable-dark-green py-4 top-[var(--ifm-navbar-height)] border-solid border-0 border-b border-gray-400",children:[t,"(",i,")"]})},s=e=>{let{parameters:t}=e,[n,o]=(0,i.useState)(!1);if(null===t||0===t.length)return null;let a=t.map(e=>(0,r.jsx)(u,{...e},e.name));return(0,r.jsxs)("div",{className:"border border-solid border-gray-500 rounded p-2",children:[(0,r.jsxs)("button",{className:"cursor-pointer border-none bg-transparent flex items-center gap-2",onClick:()=>o(!n),children:[(0,r.jsx)("span",{className:"text-2xl transition-transform transform duration-200 ease-in-out "+(n?"rotate-45":"rotate-0"),children:"+"}),(0,r.jsxs)("span",{children:[n?"Hide":"Show"," child parameters"]})]}),n&&(0,r.jsx)("div",{className:"p-4",children:a})]})},d=e=>{let{type:t}=e;return void 0===t?null:(0,r.jsxs)("small",{className:"text-gray-400 ",children:["(",t,")"]})},u=e=>{let{name:t,type:n,description:i,required:o,parameters:a}=e;void 0===a&&(a=[]),void 0===o&&(o=!0);let u=o?(0,r.jsx)("small",{className:"text-red-500 uppercase tracking-tighter",children:"required"}):(0,r.jsx)("small",{className:"text-gray-500 tracking-tighter",children:"optional"});return(0,r.jsxs)("div",{children:[(0,r.jsxs)("div",{className:"flex items-baseline gap-2",children:[(0,r.jsx)("strong",{children:t})," ",u," ",(0,r.jsx)(d,{type:n})]}),"string"==typeof i?(0,r.jsx)("p",{className:"text-sm",children:i}):i,(0,r.jsx)(s,{parameters:a})]})},c=e=>{let{parameters:t}=e;if(0===t.length)return null;let n=t.map(e=>(0,r.jsx)(u,{...e},e.name));return(0,r.jsxs)("div",{className:"mt-16",children:[(0,r.jsx)("h4",{children:"Method parameters"}),(0,r.jsx)("hr",{className:"bg-gray-600"}),n]})},l=e=>{let{returns:t}=e;return void 0===t||"void"===t.type?null:(0,r.jsxs)("div",{className:"mt-16",children:[(0,r.jsxs)("h4",{className:"mb-0",children:["Returns ",(0,r.jsx)(d,{type:t.type})]}),(0,r.jsx)("hr",{className:"bg-gray-600"}),"string"==typeof t.description?(0,r.jsx)("p",{children:t.description}):t.description]})},p=e=>{let{methodName:t,description:n,example:i,parameters:s,returns:d,deprecated:u}=e;return void 0===s&&(s=[]),(0,r.jsx)("div",{children:(0,r.jsxs)("div",{className:"grid grid-cols-2 gap-16 bg-adaptable-dark-green",children:[(0,r.jsxs)("div",{children:[(0,r.jsx)(a,{name:t,parameters:s}),u?(0,r.jsxs)("div",{className:"bg-red-500 text-white p-2",children:["Deprecated: ",u]}):null,(0,r.jsx)("p",{children:n}),(0,r.jsx)(c,{parameters:s}),(0,r.jsx)(l,{returns:d})]}),i?(0,r.jsx)("div",{className:"row-span-2",children:(0,r.jsx)(o.default,{className:"sticky z-10 top-[var(--ifm-navbar-height)]",language:i.language,showLineNumbers:!0,children:i.content})}):null]})})}}}]);