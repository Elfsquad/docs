"use strict";(self.webpackChunkelfsquad=self.webpackChunkelfsquad||[]).push([["35524"],{5865:function(e){e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"tutorial - using the API to add master data and configuration models.","metadata":{"permalink":"/blog/tutorial - using the API to add master data and configuration models.","editUrl":"https://github.com/elfsquad/docs/edit/main/blog/2024-02-27-build-model-api.md","source":"@site/blog/2024-02-27-build-model-api.md","title":"Tutorial - Using the API to add master data and configuration models.","description":"This guide will show you how to create new master data in Elfsquad (for example: from ERP), and use it to create configuration models using only the API.","date":"2024-02-27T00:00:00.000Z","tags":[{"inline":true,"label":"automation","permalink":"/blog/tags/automation"},{"inline":true,"label":"model","permalink":"/blog/tags/model"},{"inline":true,"label":"editor","permalink":"/blog/tags/editor"}],"readingTime":8.15,"hasTruncateMarker":false,"authors":[{"name":"Anco Postma","title":"Tech lead @ Elfsquad","url":"https://github.com/AJJPostma","imageURL":"https://avatars.githubusercontent.com/u/15011154?v=4","key":null,"page":null}],"frontMatter":{"slug":"tutorial - using the API to add master data and configuration models.","title":"Tutorial - Using the API to add master data and configuration models.","author":"Anco Postma","author_title":"Tech lead @ Elfsquad","author_url":"https://github.com/AJJPostma","author_image_url":"https://avatars.githubusercontent.com/u/15011154?v=4","tags":["automation","model","editor"]},"unlisted":false,"nextItem":{"title":"Tutorial - Using the API to create a configuration and add it to a quotation.","permalink":"/blog/tutorial - using the API to create a configuration and add it to a quotation."}},"content":"This guide will show you how to create new master data in Elfsquad (for example: from ERP), and use it to create configuration models using only the API.\\nOfcourse all data created here can be viewed, changed and deleted through both the API and the interface (EMS).\\nFor this purpose the elfsquad data api will be used. For more information, refer to the provided documentation. https://docs.elfsquad.io/docs/apis/data-api\\n\\n## 1. Creating master data: features\\n\\nBefore you can start building your model, you will first need the building blocks of Elfsquad: features.\\nIn order to continue it is highly recommended to read our basic documentation about features. https://support.elfsquad.io/hc/en-us/articles/360035473554-What-are-Features.\\nFor some more information: https://support.elfsquad.io/hc/en-us/articles/5266441178130-Create-or-update-Features-via-Data-API.\\n\\nThe data API offers two separate endpoints for creating new features: one for adding a single feature and another for adding multiple features.\\nWe strongly advice using the latter over sending multiple requests to the single feature endpoint.\\nTo create multiple features, the following request must be sent:\\n\\n    POST: https://api.elfsquad.io/data/1/Features/Default.BulkInsert\\n\\nThe body should have the following format:\\n\\n```json\\n{\\n  \\"entities\\": [\\n    {\\n      \\"id\\": \\"32915340-0924-409b-a938-f7024b3d883c\\",\\n      \\"name\\": \\"Product 1\\",\\n      \\"articleCode\\": \\"AB1\\",\\n      \\"type\\": \\"Feature\\",\\n      \\"salesPrice\\": 75,\\n      \\"minValue\\": 0,\\n      \\"maxValue\\": 0,\\n      \\"stepValue\\": 0,\\n      \\"packingUnit\\": 0,\\n      \\"reference\\": \\"ERP-REF-01\\",\\n      \\"customField1\\": \\"string\\",\\n      \\"customField2\\": \\"string\\",\\n      \\"customField3\\": \\"string\\",\\n      \\"customField4\\": \\"string\\",\\n      \\"customField5\\": \\"string\\"\\n    },\\n    {\\n      \\"id\\": \\"32915340-0924-409b-a938-f7024b3d883d\\",\\n      \\"name\\": \\"Product 2\\",\\n      \\"articleCode\\": \\"AB2\\",\\n      \\"type\\": \\"Feature\\",\\n      \\"salesPrice\\": 100,\\n      \\"minValue\\": 0,\\n      \\"maxValue\\": 0,\\n      \\"stepValue\\": 0,\\n      \\"packingUnit\\": 0,\\n      \\"reference\\": \\"ERP-REF-02\\",\\n      \\"customField1\\": \\"string\\",\\n      \\"customField2\\": \\"string\\",\\n      \\"customField3\\": \\"string\\",\\n      \\"customField4\\": \\"string\\",\\n      \\"customField5\\": \\"string\\"\\n    }\\n  ]\\n}\\n```\\n\\nSpecifying ids in this example is crucial for the next step. While Elfsquad can generate them if omitted, knowing the ids beforehand avoids having to fetch them later on.\\n\\nFore more information about the request and response bodies, refer to the provided documentation.\\n\\nSingle feature: https://docs.elfsquad.io/docs/spec/data/features-feature-create-feature\\n\\nMultiple features: https://docs.elfsquad.io/docs/spec/data/features-bulk-insert\\n\\n## 2. Enriching master data: feature texts\\n\\nIn order to provide the eventual users with some descriptive information about the features, some feature texts can be created. Both HTML and plain text values are supported. More info about feature texts can be found here: https://support.elfsquad.io/hc/en-us/articles/360018554940-Feature-Texts.\\n\\nJust as with features, the data API offers two seperate endpoints for creating new feature texts: one for adding a single feature text and one for adding multiple feature texts.\\nTo create multiple feature texts, the following request must be sent:\\n\\n    POST: https://api.elfsquad.io/data/1/FeatureTexts/Default.BulkInsert\\n\\nThe body should have the following format:\\n\\n```json\\n{\\n  \\"entities\\": [\\n    {\\n      \\"value\\": \\"Plain text example\\",\\n      \\"languageIso\\": \\"en\\",\\n      \\"type\\": \\"Description\\",\\n      \\"featureId\\": \\"32915340-0924-409b-a938-f7024b3d883c\\",\\n      \\"reference\\": \\"string\\",\\n      \\"customField1\\": \\"string\\",\\n      \\"customField2\\": \\"string\\",\\n      \\"customField3\\": \\"string\\",\\n      \\"customField4\\": \\"string\\",\\n      \\"customField5\\": \\"string\\"\\n    },\\n    {\\n      \\"value\\": \\"<p>Html text example</p>\\",\\n      \\"languageIso\\": \\"en\\",\\n      \\"type\\": \\"ExtendedDescription\\",\\n      \\"featureId\\": \\"32915340-0924-409b-a938-f7024b3d883c\\",\\n      \\"reference\\": \\"string\\",\\n      \\"customField1\\": \\"string\\",\\n      \\"customField2\\": \\"string\\",\\n      \\"customField3\\": \\"string\\",\\n      \\"customField4\\": \\"string\\",\\n      \\"customField5\\": \\"string\\"\\n    }\\n  ]\\n}\\n```\\n\\nNote that the featureId property should be equal to the id of the created feature(s) in the previous step.\\n\\nFore more information about the request and response bodies, refer to the provided documentation.\\n\\nSingle feature text: https://docs.elfsquad.io/docs/spec/data/feature-texts-feature-text-create-feature-text\\n\\nMultiple feature texts: https://docs.elfsquad.io/docs/spec/data/feature-texts-bulk-insert\\n\\n## 3. Expanding master data: feature properties\\n\\n### 3.1. Feature properties\\n\\nNext you will expand your master data with product specifications. In Elfsquad we call these: feature properties. In order to continue it is highly recommended to read our basic documentation about feature properties. https://support.elfsquad.io/hc/en-us/articles/360033531234-What-are-Feature-Properties\\n\\nFor a more detailed aproach for this step: https://support.elfsquad.io/hc/en-us/articles/6244044992668-Feature-properties-via-the-API.\\n\\nFirst you have to create the diffrent kind of feature properties that your features will have. Just as with the other entities, the data API offers two seperate endpoints for creating new feature properties: one for adding a single feature property and one for adding multiple feature properties.\\nTo create multiple feature properties, the following request must be sent:\\n\\n    POST: https://api.elfsquad.io/data/1/FeatureProperties/Default.BulkInsert\\n\\nThe body should have the following format:\\n\\n```json\\n{\\n  \\"entities\\": [\\n    {\\n      \\"name\\": \\"Width\\",\\n      \\"type\\": \\"Input\\",\\n      \\"id\\": \\"497f6eca-6276-4993-bfeb-53cbbbba6f08\\",\\n      \\"reference\\": \\"ERP-PROP-REF-01\\",\\n      \\"customField1\\": \\"string\\",\\n      \\"customField2\\": \\"string\\",\\n      \\"customField3\\": \\"string\\",\\n      \\"customField4\\": \\"string\\",\\n      \\"customField5\\": \\"string\\"\\n    },\\n    {\\n      \\"name\\": \\"Color\\",\\n      \\"type\\": \\"Text\\",\\n      \\"id\\": \\"497f6eca-6276-4993-bfeb-53cbbbba6f09\\",\\n      \\"reference\\": \\"ERP-PROP-REF-02\\",\\n      \\"customField1\\": \\"string\\",\\n      \\"customField2\\": \\"string\\",\\n      \\"customField3\\": \\"string\\",\\n      \\"customField4\\": \\"string\\",\\n      \\"customField5\\": \\"string\\"\\n    }\\n  ]\\n}\\n```\\n\\nSpecifying ids in this example is once again important for the next step.\\n\\nFore more information about the request and response bodies, refer to the provided documentation.\\n\\nSingle feature property: https://docs.elfsquad.io/docs/spec/data/feature-properties-feature-property-create-feature-property\\n\\nMultiple feature properties: https://docs.elfsquad.io/docs/spec/data/feature-properties-bulk-insert\\n\\n### 3.2. Feature has feature properties\\n\\nNext you have to assign your newly created properties to the features created in step 1.\\nTo do these you have to create a linking entity. This entity is called FeatureHasFeatureProperty.\\nJust as with the other entities, the data API offers two seperate endpoints for creating new feature has feature properties: one for adding a single feature has feature property and one for adding multiple feature has feature properties.\\nTo create multiple feature has feature properties, the following request must be sent:\\n\\n    POST: https://api.elfsquad.io/data/1/FeatureHasFeatureProperties/Default.BulkInsert\\n\\nThe body should have the following format:\\n\\n```json\\n{\\n  \\"entities\\": [\\n    {\\n      \\"featureId\\": \\"32915340-0924-409b-a938-f7024b3d883c\\",\\n      \\"featurePropertyId\\": \\"497f6eca-6276-4993-bfeb-53cbbbba6f08\\",\\n      \\"value\\": 150,\\n      \\"reference\\": \\"ERP-PROP-REF-01\\",\\n      \\"customField1\\": \\"string\\",\\n      \\"customField2\\": \\"string\\",\\n      \\"customField3\\": \\"string\\",\\n      \\"customField4\\": \\"string\\",\\n      \\"customField5\\": \\"string\\"\\n    },\\n    {\\n      \\"featureId\\": \\"32915340-0924-409b-a938-f7024b3d883c\\",\\n      \\"featurePropertyId\\": \\"497f6eca-6276-4993-bfeb-53cbbbba6f09\\",\\n      \\"textValue\\": \\"red\\",\\n      \\"reference\\": \\"ERP-PROP-REF-02\\",\\n      \\"customField1\\": \\"string\\",\\n      \\"customField2\\": \\"string\\",\\n      \\"customField3\\": \\"string\\",\\n      \\"customField4\\": \\"string\\",\\n      \\"customField5\\": \\"string\\"\\n    }\\n  ]\\n}\\n```\\n\\nBy sending the payload above we have assigned our feature created in step 1 a width of 150 and a color of \\"red\\".\\n\\nFore more information about the request and response bodies, refer to the provided documentation.\\n\\nSingle feature has feature property: https://docs.elfsquad.io/docs/spec/data/feature-has-feature-properties-feature-has-feature-property-create-feature-has-feature-property\\n\\nMultiple feature has feature properties: https://docs.elfsquad.io/docs/spec/data/feature-has-feature-properties-bulk-insert\\n\\n## 4. Building the model: configuration model\\n\\nNow that you have succesfully implemented your master data, you can start building your model. In Elfsquad this model is called a configuration model (or feature model). More info: https://support.elfsquad.io/hc/en-us/articles/9579633505308-What-is-a-Configuration-Models. A configuration model is based on a feature. So if you want to create a model based on the feature you created in step 1 (Product 1), you would have to sent the following request:\\n\\n    POST: https://api.elfsquad.io/data/1/FeatureModels\\n\\nWith the following JSON body format:\\n\\n```json\\n{\\n  \\"rootFeatureId\\": \\"32915340-0924-409b-a938-f7024b3d883c\\",\\n  \\"hideInShowroom\\": true,\\n  \\"hideInOrderEntry\\": true,\\n  \\"id\\": \\"497f6eca-6276-4993-bfeb-53cbbbba6f08\\",\\n  \\"reference\\": \\"string\\",\\n  \\"customField1\\": \\"string\\",\\n  \\"customField2\\": \\"string\\",\\n  \\"customField3\\": \\"string\\",\\n  \\"customField4\\": \\"string\\",\\n  \\"customField5\\": \\"string\\"\\n}\\n```\\n\\nFore more information about the request and response bodies, refer to the provided documentation. https://docs.elfsquad.io/docs/spec/data/feature-models-feature-model-create-feature-model\\n\\n## 5. Building the model: nodes\\n\\nNow that you have a configuration model, you will have to link your features to your model. In order to do this you will have to create (feature model) nodes. These nodes have quite a few optional properties, but the only ones important for now are: id, featureModelId and featureId.\\nTo create new nodes, send the following request:\\n\\n    POST: https://api.elfsquad.io/data/1/FeatureModelNodes/Default.BulkInsert\\n\\nWith the following JSON body format:\\n\\n```json\\n{\\n  \\"entities\\": [\\n    {\\n      \\"featureModelId\\": \\"497f6eca-6276-4993-bfeb-53cbbbba6f08\\",\\n      \\"featureId\\": \\"32915340-0924-409b-a938-f7024b3d883d\\",\\n      \\"hideInQuotation\\": false,\\n      \\"hideInConfigurator\\": false,\\n      \\"hideInOrderEntry\\": false,\\n      \\"hideInOverview\\": false,\\n      \\"id\\": \\"237f6eca-6276-4993-bfeb-53cbbbba6f08\\",\\n      \\"reference\\": \\"string\\",\\n      \\"customField1\\": \\"string\\",\\n      \\"customField2\\": \\"string\\",\\n      \\"customField3\\": \\"string\\",\\n      \\"customField4\\": \\"string\\",\\n      \\"customField5\\": \\"string\\"\\n    }\\n  ]\\n}\\n```\\n\\nFore more information about the request and response bodies, refer to the provided documentation. https://docs.elfsquad.io/docs/spec/data/feature-model-nodes-bulk-insert\\n\\n## 6. Building the model: relationships\\n\\nNow that your features are linked to your model, it is time for the final step: adding structure.\\nIn Elfsquad we use (feature model) relationships to do this. More information about how they work here: https://support.elfsquad.io/hc/en-us/articles/360035613073-Parent-Child-Relations.\\n\\nRelationships also have quite a few properties, but for now we\'ll focus on four of them: featureModelId, fromNodeId, toNodeId, type. All of these are mandatory.\\nTo create new relationships, send the following request:\\n\\n    POST: https://api.elfsquad.io/data/1/FeatureModelRelationships/Default.BulkInsert\\n\\nWith the following JSON body format:\\n\\n```json\\n{\\n  \\"entities\\": [\\n    {\\n      \\"featureModelId\\": \\"497f6eca-6276-4993-bfeb-53cbbbba6f08\\",\\n      \\"fromNodeId\\": \\"237f6eca-6276-4993-bfeb-53cbbbba6f08\\",\\n      \\"toNodeId\\": \\"237f6eca-6276-4993-bfeb-53cbbbba6f09\\",\\n      \\"order\\": 1,\\n      \\"default\\": false,\\n      \\"type\\": \\"Optional\\",\\n      \\"reference\\": \\"string\\",\\n      \\"customField1\\": \\"string\\",\\n      \\"customField2\\": \\"string\\",\\n      \\"customField3\\": \\"string\\",\\n      \\"customField4\\": \\"string\\",\\n      \\"customField5\\": \\"string\\"\\n    }\\n  ]\\n}\\n```\\nProperty explanation:\\n- **featureModelId**: The id of configuration model this relationship belongs to.\\n- **fromNodeId**: The id of the node that should be the parent in this relationship.\\n- **toNodeId**: The id of the node that should be the child in this relationship.\\n- **type**: The type of the relationship:\\n    - **Optional**: The child node can be turned on or off.\\n    - **Mandatory**: The child node is always turned on.\\n    - **Alternative**: For the parent node, only one alternative child node can be selected at a time.\\n\\nFore more information about the request and response bodies, refer to the provided documentation. https://docs.elfsquad.io/docs/spec/data/feature-model-nodes-bulk-insert\\n\\nAfter completing all the steps above, you have succesfully created your master data and model structure.\\nPlease refer to our internal documentation if you want to add more logic to your model using formulas, conditions and other constraints: https://support.elfsquad.io/hc/en-us/articles/7528093533212-Create-cross-tree-relations-via-data-API."},{"id":"tutorial - using the API to create a configuration and add it to a quotation.","metadata":{"permalink":"/blog/tutorial - using the API to create a configuration and add it to a quotation.","editUrl":"https://github.com/elfsquad/docs/edit/main/blog/2024-02-27-configure-api.md","source":"@site/blog/2024-02-27-configure-api.md","title":"Tutorial - Using the API to create a configuration and add it to a quotation.","description":"This guide explains how to start a new configuration, and update it, using the configurator API.","date":"2024-02-27T00:00:00.000Z","tags":[{"inline":true,"label":"automation","permalink":"/blog/tags/automation"},{"inline":true,"label":"configurator","permalink":"/blog/tags/configurator"}],"readingTime":4.96,"hasTruncateMarker":false,"authors":[{"name":"Anco Postma","title":"Tech lead @ Elfsquad","url":"https://github.com/AJJPostma","imageURL":"https://avatars.githubusercontent.com/u/15011154?v=4","key":null,"page":null}],"frontMatter":{"slug":"tutorial - using the API to create a configuration and add it to a quotation.","title":"Tutorial - Using the API to create a configuration and add it to a quotation.","author":"Anco Postma","author_title":"Tech lead @ Elfsquad","author_url":"https://github.com/AJJPostma","author_image_url":"https://avatars.githubusercontent.com/u/15011154?v=4","tags":["automation","configurator"]},"unlisted":false,"prevItem":{"title":"Tutorial - Using the API to add master data and configuration models.","permalink":"/blog/tutorial - using the API to add master data and configuration models."},"nextItem":{"title":"Tutorial - Integrate Sketchfab viewer with Elfsquad","permalink":"/blog/tutorial - sketchfab viewer"}},"content":"This guide explains how to start a new configuration, and update it, using the configurator API.\\nIt will also explain how this configuration can be added to a (new) quotation.\\n\\n## 1. Retrieve your configuration models\\n\\nTo ensure successful configuration, start by identifying the model you want to configure. You can retrieve a list of all available configuration models by sending the following request:\\n\\n    GET: https://api.elfsquad.io/configurator/3/configurator/configurationmodels\\n\\nThe response will look something like the following:\\n\\n```json\\n{\\n  \\"categories\\": [],\\n  \\"features\\": [\\n    {\\n      \\"featureModelId\\": \\"32915340-0924-409b-a938-f7024b3d883a\\",\\n      \\"featureId\\": \\"dbe93c07-198c-449f-9f22-91c529a4d060\\",\\n      \\"articleCode\\": \\"abc\\",\\n      \\"name\\": \\"Product 1\\"\\n    }\\n  ],\\n  \\"language\\": \\"en\\"\\n}\\n```\\n\\nThe featureModelId property, which uniquely identifies the configuration model, is essential for the next step. For more information about the response object, refer to the provided api documentation. https://docs.elfsquad.io/docs/spec/configurator/get-configuration-models.\\n\\n## 2. Start a new configuration\\n\\nNow that we know the id of our model, we can start a new configuration. This can be achieved by sending the following request:\\n\\n    POST: https://api.elfsquad.io/configurator/3/configurator/new/{featureModelId}\\n\\nThe featureModelId in this request is the same as the one retrieved in the previous step. Note: the id can also be found in the EMS.\\nIt is also possible to send a body containing startup requirements when starting a new configuration. This body must have the following format:\\n\\n```json\\n{\\n  \\"startupRequirements\\": [\\n    {\\n      \\"nodeId\\": \\"123e4567-e89b-12d3-a456-426614174000\\",\\n      \\"type\\": 0,\\n      \\"value\\": 0\\n    },\\n    {\\n      \\"nodeId\\": \\"123e4567-e89b-12d3-a456-426614174001\\",\\n      \\"type\\": 1,\\n      \\"value\\": 10\\n    },\\n    {\\n      \\"nodeId\\": \\"123e4567-e89b-12d3-a456-426614174002\\",\\n      \\"type\\": 2,\\n      \\"value\\": \\"Some text\\"\\n    },\\n     {\\n      \\"nodeId\\": \\"123e4567-e89b-12d3-a456-426614174003\\",\\n      \\"type\\": 3,\\n      \\"value\\": 5\\n    }\\n  ]\\n}\\n```\\n\\nProperty explanation:\\n\\n- **nodeId:** The id of the node you want to change.\\n- **type & value:** We currently support 3 different types:\\n  1.  **Selection**(0): When using a selection type requirement, sending a value of 0 will turn the specified node off. Any other value will turn the node on and change the value to the provided value. Only numeric values are supported.\\n  2.  **Value**(1): When using a value type requirement, the specified node will turn on (if not on already) and will have it\'s value changed to the provided value. Even when the value is 0. Only numeric values are supported.\\n  3.  **Text**(2): When using a text type requirement, the specified node will have it\'s textValue changed to the provided value. Only string values are supported.\\n  4. **Cardinality**(3): When using a cardinality requirement, the specified linkedmodel node will have the specified amount off instances.\\n\\nThe response body will contain the id of the newly created configuration. This id is needed for the other steps.\\nFor more information about the request and response bodies, refer to the provided api documentation. https://docs.elfsquad.io/docs/spec/configurator/start-configuration-session.\\n\\n## 3. Updating the configuration\\n\\nFor further configuration changes, you can also utilize the configurator API. However, if you possess all required modifications beforehand, consider using the startup requirements covered earlier for optimal performance.\\nUpdating numeric values can be done by sending the following request:\\n\\n    PUT: https://api.elfsquad.io/configurator/3/configurator/{configurationId}/multiple\\n\\nNote that configurationId is the id of the configuration created in the previous step. The request should contain a JSON body with an array of requirements that have the following format:\\n\\n```json\\n[\\n  {\\n    \\"featureModelNodeId\\": \\"ad1e70a3-199a-4363-9b12-40472c568135\\",\\n    \\"value\\": 0,\\n    \\"isSelection\\": true\\n  },\\n  {\\n    \\"featureModelNodeId\\": \\"ad1e70a3-199a-4363-9b12-40472c568136\\",\\n    \\"value\\": 5,\\n    \\"isSelection\\": false\\n  }\\n]\\n```\\n\\nProperty explanation:\\n\\n- **featureModelNodeId**: The id of the node that has to be updated.\\n- **value**: The value that has to be assigned to the specified node. Only numeric values are supported.\\n- **isSelection**: When set to true, the requirement will behave like a selection type requirement from the previous step. Otherwise it will act like a value type requirement.\\n\\nA slightly different request has to be sent when updating text values:\\n\\n    PUT: https://api.elfsquad.io/configurator/3/configurator/{configurationId}/text/multiple\\n\\nThe JSON body is also slightly different:\\n\\n```json\\n[\\n  {\\n    \\"featureModelNodeId\\": \\"ad1e70a3-199a-4363-9b12-40472c568135\\",\\n    \\"textValue\\": \\"\\"\\n  },\\n  {\\n    \\"featureModelNodeId\\": \\"ad1e70a3-199a-4363-9b12-40472c568136\\",\\n    \\"textValue\\": \\"Example Text\\"\\n  }\\n]\\n```\\n\\nProperty explanation:\\n\\n- **featureModelNodeId**: The id of the node that has to be updated.\\n- **textValue**: The text value that has to be assigned to the specified node. Only string values are supported.\\n\\nFor more information regarding the request and response bodies, refer to the provided api documentation. https://docs.elfsquad.io/docs/spec/configurator/update-requirement.\\n\\n## 4. Creating a new quotation\\n\\nBefore you can add the properly adjusted configuration to a quotation, you have to create a new quotation. This can be done using our quotation api. The api will automatically assign the correct quotation status and quotation number. This can be done by sending the following request:\\n\\n    POST: https://api.elfsquad.io/quotation/1/quotations\\n\\nThis request requires a JSON body with optional properties.\\nThe response body will contain the id of the newly created quotation.\\nFor more information about the request and response bodies, refer to the provided api documentation. https://docs.elfsquad.io/apis/quotation\\n\\n## 5. Adding the configuration to the quotation\\n\\nIn order to complete this step you need the id of the configuration that was created in step 2. You will also need the id of the quotation that was created in the previous step.\\nTo add the configuration to the quotation the following request must be sent:\\n\\n    PUT: https://api.elfsquad.io/configurator/3/configurator/addtoquotation\\n\\nFor this request a JSON body with the following format is required:\\n\\n```json\\n{\\n  \\"quotationId\\": \\"1ceb365d-7c0e-435f-8012-dd887707710b\\",\\n  \\"configurationIds\\": [\\"747fe28d-fd35-4938-aac2-7a102b20196e\\"]\\n}\\n```\\n\\nThe value of quotationId should be replaced by the id of the quotation from the previous step.\\nThe value of configurationIds should be an array containing the id of the configuration from step 2. Please note that adding multiple (unique) configurations in one request is supported.\\nAfter the request completes, the configuration will be added to the quotation. The new quotation is immediately visable in the EMS.\\nWant to change the status of your newly created quotation? Please refer to our documentation: https://support.elfsquad.io/hc/en-us/articles/9435941123484-Quotation-functions-in-API."},{"id":"tutorial - sketchfab viewer","metadata":{"permalink":"/blog/tutorial - sketchfab viewer","editUrl":"https://github.com/elfsquad/docs/edit/main/blog/2023-02-21-sketchfab.md","source":"@site/blog/2023-02-21-sketchfab.md","title":"Tutorial - Integrate Sketchfab viewer with Elfsquad","description":"In this tutorial I will show you a basic integration of the Sketchfab viewer with Elfsquad.","date":"2023-02-21T00:00:00.000Z","tags":[{"inline":true,"label":"showroom","permalink":"/blog/tags/showroom"},{"inline":true,"label":"sketchfab","permalink":"/blog/tags/sketchfab"},{"inline":true,"label":"viewer","permalink":"/blog/tags/viewer"}],"readingTime":5.53,"hasTruncateMarker":false,"authors":[{"name":"Johannes Heesterman","title":"Lead Software Engineer @ Elfsquad","url":"https://github.com/johannesheesterman","imageURL":"https://avatars.githubusercontent.com/u/7443666?v=4","key":null,"page":null}],"frontMatter":{"slug":"tutorial - sketchfab viewer","title":"Tutorial - Integrate Sketchfab viewer with Elfsquad","author":"Johannes Heesterman","author_title":"Lead Software Engineer @ Elfsquad","author_url":"https://github.com/johannesheesterman","author_image_url":"https://avatars.githubusercontent.com/u/7443666?v=4","tags":["showroom","sketchfab","viewer"]},"unlisted":false,"prevItem":{"title":"Tutorial - Using the API to create a configuration and add it to a quotation.","permalink":"/blog/tutorial - using the API to create a configuration and add it to a quotation."},"nextItem":{"title":"Tutorial - Custom configurator in Angular","permalink":"/blog/tutorial - custom configurator in Angular"}},"content":"In this tutorial I will show you a basic integration of the Sketchfab viewer with Elfsquad.\\n\\n## 1. Embed Sketchfab viewer\\nLet\'s start with creating creating a new HTML page that embeds a Sketchfab viewer. This sample code can also be found on the official [Sketchfab for Developers Viewer API page](https://sketchfab.com/developers/viewer).\\n```html\\n<!DOCTYPE HTML>\\n<html>\\n<head>\\n    <meta charset=\\"UTF-8\\">\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\">\\n    <title>Sketchfab Viewer API example</title>\\n\\n    \x3c!-- Insert the Sketchfab viewer script --\x3e\\n    <script type=\\"text/javascript\\" src=\\"https://static.sketchfab.com/api/sketchfab-viewer-1.12.1.js\\"><\/script>\\n\\n    <style>\\n        html, body{\\n            margin:0;\\n            padding:0;\\n            overflow: hidden;\\n        }\\n        iframe {\\n            border:none;\\n            height:100vh;\\n            width:100vw;\\n        }\\n    </style>\\n</head>\\n\\n<body>\\n    \x3c!-- Insert an empty iframe with attributes --\x3e\\n    <iframe src=\\"\\" id=\\"api-frame\\" allow=\\"autoplay; fullscreen; xr-spatial-tracking\\" xr-spatial-tracking execution-while-out-of-viewport execution-while-not-rendered web-share allowfullscreen mozallowfullscreen=\\"true\\" webkitallowfullscreen=\\"true\\"></iframe>\\n\\n    \x3c!-- Initialize the viewer --\x3e\\n    <script type=\\"text/javascript\\">\\n        const iframe = document.getElementById( \'api-frame\' );\\n        const uid = \'cee9dd8f490c47469d2a4e64f99e8056\'; // Replace with the ID of your model.\\n        const client = new Sketchfab( iframe );\\n        let sketchfabApi;\\n        client.init( uid, {\\n            success: function onSuccess( api ){\\n                sketchfabApi = api;\\n                api.start();\\n                api.addEventListener( \'viewerready\', function() {\\n\\n                    console.log( \'Viewer is ready\' );\\n\\n                } );\\n            },\\n            error: function onError() {\\n                console.log( \'Viewer error\' );\\n            }\\n        } );\\n    <\/script>\\n</body>\\n</html>\\n```\\n\\nNow you should be able to open the HTML file in your browser and see your 3D model:\\n\\n![Screenshot 1](/img/tutorial/sketchfab/screenshot-1.png)\\n\\n## 2. Serve through web server\\nIn order to be able to embed the viewer as a third party visualization within Elfsquad, the newly created HTML page needs to be served through a web server. For this tutorial it is sufficient to use localhost.\\n\\nFrom within the folder in which you created the HTML file type the following command:\\n```bash\\npython -m http.server 8000\\n```\\n\\nNow if you navigate to http://localhost:8000, you should see your page being served.\\n\\n## 3. Embed in Elfsquad\\nNow that we have a web server running, we can embed the viewer in Elfsquad. \\nWithin the Elfsquad EMS navigate to the step editor of the model you want to embed the viewer in. \\n\\nCreate a new step and select the Type \\"Third party visualization\\". In the \\"Third party visualization URL\\" field enter the URL of your HTML page. In this case, it would be http://localhost:8000.\\n\\n![Screenshot 2](/img/tutorial/sketchfab/screenshot-2.png)\\n\\nNow hit save and you should see your 3D model being embedded in Elfsquad.\\n\\n## 4. Listening to configuration changes\\nIn order to be able to react to configuration changes, we need to add a listener to the viewer. This listener will be activated in the `viewerReady` event callback.\\n\\nUpdate the `viewerready` event listener to first retrieve a node map of the model. This node map will be used to identify the parts of the model that need to be shown or hidden. Then we will call the `activateConfigurationUpdateListener` function that will add the listener to the page.\\n```javascript\\nlet nodeMap = null;\\nclient.init( uid, {\\n    success: function onSuccess( api ){\\n        sketchfabApi = api;\\n        api.start();\\n        api.addEventListener( \'viewerready\', function() {\\n\\n            api.getNodeMap(function(err, nodes) {\\n                if (!err) {\\n                    nodeMap = nodes;\\n                    activateConfigurationUpdateListener();\\n                }\\n            });\\n        } );\\n    },\\n    error: function onError() {\\n        console.log( \'Viewer error\' );\\n    }\\n} );\\n```\\n\\nNow we can define the `activateConfigurationUpdateListener` function. This function will be called when the viewer is ready and will add a listener to page that will be activated when the configuration changes. The listener will then call the `updateViewer` function with the new configuration as an argument.\\n```javascript\\nfunction activateConfigurationUpdateListener() {\\n    window.addEventListener(\'message\', function(e){\\n        if (e.data && e.data.name == \'elfsquad.configurationUpdated\'){\\n            updateViewer(e.data.args);\\n        }                 \\n    });\\n}\\n```\\n\\nNow we can define the `updateViewer` function. This function will be called when the configuration changes and will update the viewer with the new configuration.\\n\\nFor this example I will recursively iterate over all the features in the configuration and based on whether the feature is enabled or not, I will either show or hide the corresponding part of the model. This is just an example and you can implement any logic you want here. \\n```javascript\\nfunction updateViewer(configuration) {\\n    const stack = configuration.steps.map(step => step.features).flat(1);\\n\\n    while(stack.length > 0) {\\n        const current = stack.pop();\\n        for (let f of current.features) stack.push(f);\\n        if (!current.code) continue;        \\n        \\n        const ids = Object.values(nodeMap)\\n            .filter(node => node.name == current.code)\\n            .map(node => node.instanceID);\\n        \\n        for (let id of ids) {\\n            if (current.isSelected) {\\n                sketchfabApi.show(id);\\n            } else {\\n                sketchfabApi.hide(id);\\n            }\\n        }\\n    }\\n}\\n```\\n\\nIf you mapped the feature codes to the corresponding parts of the model correctly, you should now be able to see the model update when you change the configuration in Elfsquad:\\n\\n![Result](/img/tutorial/sketchfab/result.gif)\\n\\n## 5. Initialize with configuration\\nNow you may have noticed that the model is not initialized with the configuration. This is because the `updateViewer` function is only called when the configuration changes. In order to initialize the model with the configuration, we need to trigger the `configurationUpdated` event once manually within the `viewerready` function when the viewer is ready.\\n\\nAfter the `activateConfigurationUpdateListener` call add a postMessage call to the top window. This will trigger the `configurationUpdated` event in Elfsquad and the model will be initialized with the configuration.\\n```javascript\\napi.addEventListener( \'viewerready\', function() {\\n    api.getNodeMap(function(err, nodes) {\\n        if (!err) {                            \\n            nodeMap = nodes;\\n            console.log(\'nodeMap\', nodeMap);\\n            activateConfigurationUpdateListener();\\n\\n            window.top.postMessage({\\n                name: \'elfsquad.triggerConfigurationUpdated\'\\n            }, \'*\');\\n        }\\n    });\\n} );\\n```\\n\\n## 6. Result\\nThe final code should look like this:\\n```html\\n<!DOCTYPE HTML>\\n<html>\\n<head>\\n    <meta charset=\\"UTF-8\\">\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\">\\n    <title>Sketchfab Viewer API example</title>\\n\\n    <script type=\\"text/javascript\\" src=\\"https://static.sketchfab.com/api/sketchfab-viewer-1.12.1.js\\"><\/script>\\n\\n    <style>\\n        html, body{\\n            margin:0;\\n            padding:0;\\n            overflow: hidden;\\n        }\\n        iframe {\\n            border:none;\\n            height:100vh;\\n            width:100vw;\\n        }\\n    </style>\\n</head>\\n\\n<body>\\n    <iframe src=\\"\\" id=\\"api-frame\\" allow=\\"autoplay; fullscreen; xr-spatial-tracking\\" xr-spatial-tracking execution-while-out-of-viewport execution-while-not-rendered web-share allowfullscreen mozallowfullscreen=\\"true\\" webkitallowfullscreen=\\"true\\"></iframe>\\n\\n    <script type=\\"text/javascript\\">\\n        const iframe = document.getElementById( \'api-frame\' );\\n        const uid = \'cee9dd8f490c47469d2a4e64f99e8056\';\\n        const client = new Sketchfab( iframe );\\n        let sketchfabApi;\\n        let nodeMap;\\n        client.init( uid, {\\n            success: function onSuccess( api ){\\n                sketchfabApi = api;\\n                api.start();\\n                api.addEventListener( \'viewerready\', function() {\\n\\n                    api.getNodeMap(function(err, nodes) {\\n                        if (!err) {                            \\n                            nodeMap = nodes;\\n                            console.log(\'nodeMap\', nodeMap);\\n                            activateConfigurationUpdateListener();\\n\\n                            window.top.postMessage({\\n                                name: \'elfsquad.triggerConfigurationUpdated\'\\n                            }, \'*\');\\n                        }\\n                    });\\n                } );\\n            },\\n            error: function onError() {\\n                console.log( \'Viewer error\' );\\n            }\\n        } );\\n\\n\\n        function activateConfigurationUpdateListener() {\\n            window.addEventListener(\'message\', function(e){\\n                if (e.data && e.data.name == \'elfsquad.configurationUpdated\'){\\n                    updateViewer(e.data.args);\\n                }                 \\n            });\\n        }\\n\\n        function updateViewer(configuration) {\\n            const stack = configuration.steps.map(step => step.features).flat(1);\\n\\n            while(stack.length > 0) {\\n                const current = stack.pop();\\n                for (let f of current.features) stack.push(f);\\n                if (!current.code) continue;        \\n                \\n                const ids = Object.values(nodeMap)\\n                    .filter(node => node.name == current.code)\\n                    .map(node => node.instanceID);\\n                \\n                for (let id of ids) {\\n                    if (current.isSelected) {\\n                        sketchfabApi.show(id);\\n                    } else {\\n                        sketchfabApi.hide(id);\\n                    }\\n                }\\n            }\\n        }\\n\\n    <\/script>\\n</body>\\n</html>\\n```\\n\\n\\n## 7. Next steps\\n\\nNow that you have a working integration, you can start to customize it to your needs. Here are some resources you can use to get started:\\n- [Sketchfab Viewer API documentation](https://sketchfab.com/developers/viewer)\\n- [Sketchfab Viewer API functions](https://sketchfab.com/developers/viewer/functions)"},{"id":"tutorial - custom configurator in Angular","metadata":{"permalink":"/blog/tutorial - custom configurator in Angular","editUrl":"https://github.com/elfsquad/docs/edit/main/blog/2022-09-20-customer-configurator-angular-updated.md","source":"@site/blog/2022-09-20-customer-configurator-angular-updated.md","title":"Tutorial - Custom configurator in Angular","description":"In this tutorial, I will provide a quick overview of how to implement","date":"2022-09-20T00:00:00.000Z","tags":[{"inline":true,"label":"angular","permalink":"/blog/tags/angular"},{"inline":true,"label":"configurator","permalink":"/blog/tags/configurator"}],"readingTime":8.26,"hasTruncateMarker":false,"authors":[{"name":"Stan van Rooy","title":"DevOps @ Elfsquad","url":"https://github.com/stanvanrooy","imageURL":"https://avatars.githubusercontent.com/u/49564025?v=4","key":null,"page":null}],"frontMatter":{"slug":"tutorial - custom configurator in Angular","title":"Tutorial - Custom configurator in Angular","author":"Stan van Rooy","author_title":"DevOps @ Elfsquad","author_url":"https://github.com/stanvanrooy","author_image_url":"https://avatars.githubusercontent.com/u/49564025?v=4","tags":["angular","configurator"]},"unlisted":false,"prevItem":{"title":"Tutorial - Integrate Sketchfab viewer with Elfsquad","permalink":"/blog/tutorial - sketchfab viewer"},"nextItem":{"title":"Tutorial - Custom viewer based on Verge3D","permalink":"/blog/tutorial - verge3d viewer"}},"content":"In this tutorial, I will provide a quick overview of how to implement\\nyour customer-facing showroom in Angular.\\n\\nYou can find the resulting project in the [showroom-example\\nrepository](https://github.com/elfsquad/showroom-example) on our Github.\\n\\n> \u2139\uFE0F If you\u2019re not familiar with Angular, you can follow the [Angular\\n> getting started guide](https://angular.io/start).\\n\\n## Setting up a new Angular project\\n\\nCreate a new Angular project using the Angular CLI.\\n\\n### Creating the project\\n```bash\\n    ng new ShowroomExample --routing=true --style=css\\n```\\n\\nOnce that\u2019s finished, you should be able to run the application and open\\nit on [localhost:4200](http://localhost:4200).\\n\\n```\\n    ng serve\\n```\\n\\n### Installing dependencies\\n\\nFor this tutorial, we\u2019ll make use of the\\n[@elfsquad/authentication](https://github.com/elfsquad/authentication)\\nand [@elfsquad/configurator](https://github.com/elfsquad/configurator)\\npackages.\\n\\nThese are developed and maintained by Elfsquad.\\n\\n```bash\\n    npm install @elfsquad/authentication\\n    npm install @elfsquad/configurator\\n```\\n\\n### Adding some basic html/css\\n\\nIn the `index.html`, we add a little bit of styling:\\n\\n```html\\n    <style>\\n        * {\\n          font-family: -apple-system, BlinkMacSystemFont, \\"Segoe UI\\", Roboto, Helvetica, Arial, sans-serif, \\"Apple Color Emoji\\", \\"Segoe UI Emoji\\", \\"Segoe UI Symbol\\";\\n        }\\n\\n        body, p {\\n          margin: 0;\\n          padding: 0;\\n        }\\n    </style>\\n```\\n\\nAnd in the `app.component.html` file, we\u2019ll remove everything but the\\n`<router-outlet></router-outlet>` tag.\\n\\n### Creating the configurator context\\n\\nWe communicate with the Elfsquad API through the `ConfiguratorContext`.\\nWe can initialize this class in the `app.module.ts` file. The\\nconfigurator context can be used for both anonymous and showrooms that\\nrequire a logged in user.\\n\\n```typescript\\n    import { NgModule } from \'@angular/core\';\\n    import { BrowserModule } from \'@angular/platform-browser\';\\n    import {ConfiguratorContext, IConfiguratorOptions} from \'@elfsquad/configurator\';\\n    import {AuthenticationMethod} from \'@elfsquad/configurator/dist/configurator/IConfiguratorOptions\';\\n\\n    import { AppRoutingModule } from \'./app-routing.module\';\\n    import { AppComponent } from \'./app.component\';\\n    import { ProductOverviewComponent } from \'./product-overview/product-overview.component\';\\n    import { FormsModule } from \'@angular/forms\';\\n\\n    const options: IConfiguratorOptions = {\\n      authenticationMethod: AuthenticationMethod.ANONYMOUS,\\n      tenantId: \'5dcd73c7-c0e9-44e8-85f3-dfef7553e8a2\',\\n    };\\n\\n    const configuratorContext = new ConfiguratorContext(options);\\n\\n    @NgModule({\\n      declarations: [\\n        AppComponent,\\n        ProductOverviewComponent\\n      ],\\n      imports: [\\n        BrowserModule,\\n        AppRoutingModule,\\n        FormsModule\\n      ],\\n      providers: [\\n        { provide: ConfiguratorContext, useValue: configuratorContext }\\n      ],\\n      bootstrap: [AppComponent],\\n    })\\n    export class AppModule { }\\n  ```\\n\\nIf you want to require a logged in user, you can need to change a few\\nsnippets of code in the example above.\\n\\n1.  Add the `authenticationOptions` to the `configuratorOptions` object:\\n\\n```typescript\\n    const options = {\\n      tenantId: \'5dcd73c7-c0e9-44e8-85f3-dfef7553e8a2\',\\n      authenticationMethod: AuthenticationMethod.USER_LOGIN,\\n      authenticationOptions: {\\n        clientId: \'60a98ec8-c9f7-4b4e-a809-0492f25b8037\',\\n        redirectUri: \'http://localhost:4200\',\\n      }\\n    };\\n```\\n\\n1.  Check if the user is logged in and if not, redirect to the login\\n    page.\\n\\n\\n```typescript\\n    const configuratorContext = new ConfiguratorContext(options);\\n    configuratorContext.authenticationContext.isSignedIn().then(signedIn => {\\n      if (signedIn) {\\n        return;\\n      }\\n      configuratorContext.authenticationContext.signIn();\\n    });\\n```\\n\\n> \u26A0\uFE0F Make sure to replace the `tenantId` with your tenant id\\n\\n## Creating the product overview page\\n\\nWe start by creating a `ProductOverview` component. This component will\\nshow all configuration models available.\\n\\n    ng generate component ProductOverview\\n\\n### Adding the product overview route\\n\\nNow that we\u2019ve created the component, we should register it as a route,\\nso our users can access it. You can register the route by adding it to\\nthe `app-routing-module.ts` file.\\n\\n```typescript\\n    import { NgModule } from \'@angular/core\';\\n    import { RouterModule, Routes } from \'@angular/router\';\\n    import {ProductOverviewComponent} from \'./product-overview/product-overview.component\';\\n\\n    const routes: Routes = [\\n      { path: \'\', component: ProductOverviewComponent },\\n    ];\\n\\n    @NgModule({\\n      imports: [RouterModule.forRoot(routes)],\\n      exports: [RouterModule]\\n    })\\n    export class AppRoutingModule { }\\n```\\n\\n### Retrieving the configuration models\\n\\nThe first step to creating the product overview is retrieving a list of\\navailable configuration models. We can do this in the `ngOnInit` method\\nof the `ProductOverview` component.\\n\\n```typescript\\n    import { Component, Inject, OnInit } from \'@angular/core\';\\n    import { ConfigurationModel, ConfiguratorContext } from \'@elfsquad/configurator\';\\n\\n    @Component({\\n      selector: \'app-product-overview\',\\n      templateUrl: \'./product-overview.component.html\',\\n      styleUrls: [\'./product-overview.component.css\']\\n    })\\n    export class ProductOverviewComponent implements OnInit {\\n      public configurationModels: ConfigurationModel[] = [];\\n\\n      constructor(\\n        @Inject(ConfiguratorContext) private configuratorContext: ConfiguratorContext,\\n      ) { }\\n\\n      ngOnInit(): void {\\n        this.configuratorContext.getConfigurationModels().then(configurationModels => {\\n          this.configurationModels = configurationModels.features;\\n        });\\n      }\\n    }\\n```\\n\\nThe configuration models should now be retrieved when you open the page.\\n\\n### Displaying the configuration models\\n\\nTo display those models, we create a grid overview in the\\n`product-overview.component.html` file.\\n\\n```html\\n    <div class=\\"product-overview\\">\\n      <div *ngFor=\\"let model of configurationModels\\" class=\\"product-card\\" [routerLink]=\\"[\'configure\', model.featureModelId]\\">\\n        <img [src]=\\"model.imageUrl\\" />\\n        <h3 [innerHTML]=\\"model.description\\"></h3>\\n      </div>\\n    </div>\\n```\\n\\nAnd the following CSS:\\n\\n```css\\n    div.product-overview {\\n      padding: 80px;\\n      display: flex;\\n      gap: 40px;\\n      flex-wrap: wrap;\\n      justify-content: center;\\n    }\\n\\n    div.product-overview > div.product-card {\\n      padding: 8px;\\n      width: 28%;\\n      box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;\\n    }\\n\\n    div.product-overview > div.product-card > img {\\n      height: auto;\\n      width: 100%;\\n    }\\n```\\n\\n## Creating the configurator page\\n\\nNow that we have a product overview page, we can proceed to build the\\nactual configurator. This is the page on which users can configure their\\nmodel.\\n\\nLet\u2019s start by creating a `ConfiguratorComponent`\\n\\n```bash\\n    ng generate component Configurator\\n```\\n\\nAnd registering a route to access the configurator page. Notice we use a\\n`:id` parameter in the path. This id can either be the name or the id of\\na configuration model.\\n\\n```typescript\\n    { path: \'configure/:id\', component: ConfiguratorComponent }\\n```\\n\\n### Starting a new configuration\\n\\nOnce the user visits the configurator page, we need to start a new\\nconfiguration. To do this, we\u2019ll:\\n\\n1.  Inject the `ActivatedRoute`, from which we can retrieve the\\n    configuration model id\\n\\n2.  Use the `ConfiguratorContext` to start a new configuration\\n\\n3.  Store the new configuration on the `ConfiguratorComponent`\\n\\n4.  Update `ConfiguratorComponent.configuration` every time the\\n    configuration is updated.\\n\\n```typescript\\n    import { Component, OnInit } from \'@angular/core\';\\n    import { ActivatedRoute } from \'@angular/router\';\\n    import { Configuration, ConfiguratorContext } from \'@elfsquad/configurator\';\\n\\n    @Component({\\n      selector: \'app-configurator\',\\n      templateUrl: \'./configurator.component.html\',\\n      styleUrls: [\'./configurator.component.css\']\\n    })\\n    export class ConfiguratorComponent implements OnInit {\\n      public configuration: Configuration | undefined;\\n\\n      constructor(\\n        private route: ActivatedRoute,\\n        private configuratorContext: ConfiguratorContext\\n      ) { }\\n\\n      ngOnInit(): void {\\n        this.route.params.subscribe(params => {\\n          this.configuratorContext.newConfiguration(params[\'id\'])\\n            .then(configuration => {\\n              this.configuration = configuration;\\n            });\\n          this.configuratorContext.onUpdate((e: CustomEvent) => {\\n            this.configuration = e.detail;\\n          });\\n        });\\n      }\\n    }\\n```\\n\\nThe resulting configuration object contains many different fields, all\\nof which can be explored on\\n[docs.elfsquad.io](https://docs.elfsquad.io).\\n\\nThis tutorial will focus mainly on steps and displaying the price.\\n\\nThe configuration object has a `steps` property, which contains an array\\nof all steps. A step contains features, and each feature can contain\\n*child* features.\\n\\n    - Title\\n    - Features\\n      - Description\\n      - UnitPrice\\n      - TotalPrice\\n      - Type\\n      - Features (Children of the current feature, recursive)\\n        - ...\\n      - ...\\n\\n### Displaying the steps\\n\\nWe will display only one step at a time. To do this, we\u2019ll add a\\n`activeIndex` and functions to go the next/previous step to the\\n`configurator.component.ts` file.\\n\\n```typescript\\n      public activeIndex: number = 0;\\n\\n      public next() {\\n        this.activeIndex += 1;\\n      }\\n\\n      public previous() {\\n        this.activeIndex -= 1;\\n      }\\n```\\n\\nIn the HTML, we\u2019ll iterate overall features in the step and display them\\nby using the `app-feature` tag. This is a component we\u2019ll create in the\\nnext step.\\n\\n```html\\n    <div *ngFor=\\"let step of configuration?.steps ?? []; let i = index\\">\\n      <div class=\\"step\\" [class.active]=\\"i === activeIndex\\">\\n        <app-feature [configuration]=\\"configuration\\" [feature]=\\"feature\\" *ngFor=\\"let feature of step.features\\"></app-feature>\\n      </div>\\n    </div>\\n\\n    <div class=\\"footer\\">\\n      <span>\\n        <b>Total price:</b>\\n        {{ configuration?.totalPrice | currency: \'EUR\': true }}\\n      </span>\\n      <br />\\n      <button\\n        [disabled]=\\"activeIndex === 0\\"\\n        (click)=\\"previous()\\"\\n      >\\n        Previous\\n      </button>\\n      <button\\n        [disabled]=\\"activeIndex === (configuration?.steps ?? []).length - 1\\"\\n        (click)=\\"next()\\"\\n      >\\n        Next\\n      </button>\\n    </div>\\n```\\n\\nand CSS\\n\\n```css\\n    div.step {\\n      display: none;\\n      max-width: 400px;\\n    }\\n\\n    div.step.active {\\n      display: block;\\n    }\\n\\n    div.footer {\\n      margin-top: 12px;\\n      margin-left: 24px;\\n    }\\n```\\n\\n## Creating the feature component\\n\\nWe show features using the `app-feature` tag in the previous step. This\\nis a new component that we\u2019re about to implement.\\n\\nBecause of the recursive nature of features, we need to create a new\\ncomponent for them.\\n\\n```bash\\n    ng generate component Feature\\n```\\n\\nThis component will take a feature as input.\\n\\n```typescript\\n    import { Component, Input, OnInit } from \'@angular/core\';\\n    import { ConfigurationFeature, Configuration } from \'@elfsquad/configurator\';\\n\\n    @Component({\\n      selector: \'app-feature\',\\n      templateUrl: \'./feature.component.html\',\\n      styleUrls: [\'./feature.component.css\']\\n    })\\n    export class FeatureComponent implements OnInit {\\n      @Input(\'feature\') feature: ConfigurationFeature | undefined;\\n      @Input(\'configuration\') configuration: Configuration | undefined;\\n\\n      constructor( ) { }\\n\\n      ngOnInit(): void { }\\n    }\\n```\\n\\n### Toggling features on/off\\n\\nFor this example, we\u2019ll only enable toggling features on and off, so\\nwe\u2019ll only have to implement the `toggle()` function.\\n\\nThis function will (de)select an option within the configuration model.\\n\\n```typescript\\n      toggle(): void {\\n        if (!this.feature)\\n          return;\\n\\n        if (!this.configuration)\\n          return;\\n\\n        const value = this.feature.isSelected ? 0 : 1;\\n        this.configuration.updateRequirement(\\n          this.feature.id,\\n          this.feature.isSelected,\\n          value\\n        );\\n      }\\n```\\n\\n### Displaying the feature\\n\\nFor displaying features, we\u2019ll add some HTML to the\\n`feature.component.html` file.\\n\\n```html\\n    <div class=\\"feature\\">\\n      <div class=\\"header\\">\\n        <span [innerHTML]=\\"feature?.description\\"></span>\\n        <input\\n         type=\\"checkbox\\"\\n         [checked]=\\"feature?.isSelected\\"\\n         (click)=\\"toggle()\\"\\n         *ngIf=\\"feature?.type === 0\\"\\n        />\\n        <input\\n         type=\\"radio\\"\\n         [checked]=\\"feature?.isSelected\\"\\n         (click)=\\"toggle()\\"\\n         *ngIf=\\"feature?.type === 2\\"\\n        />\\n      </div>\\n      <span *ngIf=\\"feature?.minValue == feature?.maxValue && feature?.value != 0 && feature?.value != 1\\">\\n        {{feature?.value}} {{feature?.unitOfMeasurement}}\\n      </span>\\n      <span>{{feature?.unitPrice}}</span>\\n      <app-feature\\n        [configuration]=\\"configuration\\"\\n        [feature]=\\"f\\"\\n        *ngFor=\\"let f of feature?.features\\"\\n        ></app-feature>\\n    </div>\\n```\\n\\nAnd add the css below to `feature.component.css`\\n\\n```css\\n    div.feature {\\n      width: 100%;\\n      height: 100%;\\n      margin-left: 24px;\\n      margin-bottom: 6px;\\n    }\\n\\n    div.feature > div.header {\\n      display: flex;\\n      align-items: center;\\n      justify-content: space-between;\\n    }\\n```\\n\\n## Requesting a quote\\n\\nNow that we are able to configure a product, we can go ahead and request\\na quotation. We\u2019ll add a button to the configurator page:\\n\\n```html\\n    <button [routerLink]=\\"[\'/checkout\', configuration?.id]\\">Request quote</button>\\n```\\n\\n### Creating the checkout page\\n\\nAs before, we\u2019ll start by creating the `Checkout` component.\\n\\n```bash\\n    ng generate component Checkout\\n```\\n\\nand add the route to the `app-routing.module.ts` file. In this route,\\nthe id stands for the configuration id.\\n\\n```typescript\\n      { path: \'checkout/:id\', component: CheckoutComponent }\\n```\\n\\nIn the `checkout.component.ts` file, we\u2019ll create a function to request\\na quote\\n\\n```typescript\\n     import { Component, OnInit } from \'@angular/core\';\\nimport { ConfiguratorContext, QuotationRequest } from \'@elfsquad/configurator\';\\n\\n@Component({\\n  selector: \'app-checkout\',\\n  templateUrl: \'./checkout.component.html\',\\n  styleUrls: [\'./checkout.component.css\']\\n})\\nexport class CheckoutComponent implements OnInit {\\n\\n  constructor(private configuratorContext : ConfiguratorContext) { }\\n\\n  ngOnInit(): void {\\n  }\\n  public isSubmitted = false;\\n  public model: QuotationRequest = {};\\n\\n  requestQuote() {\\n    this.configuratorContext.requestQuote(this.model).then(_ => {\\n      this.isSubmitted = true;\\n    });\\n  }\\n}\\n\\n```\\n\\nThe checkout page itself, is divided into two sections. One before the\\nrequest is submitted, and one afterward:\\n\\n```html\\n    <h3>Request quote</h3>\\n\\n    <div *ngIf=\\"!isSubmitted\\">\\n      <form>\\n        <fieldset>\\n          <legend>Contact information</legend>\\n          <label>\\n            First name:\\n            <input [(ngModel)]=\\"model.firstName\\" name=\\"firstName\\" />\\n          </label>\\n          <label>\\n            Last name:\\n            <input [(ngModel)]=\\"model.lastName\\" name=\\"lastName\\" />\\n          </label>\\n          <label>\\n            Email:\\n            <input [(ngModel)]=\\"model.email\\" name=\\"email\\" />\\n          </label>\\n          <label>\\n            Phone:\\n            <input [(ngModel)]=\\"model.phoneNumber\\" name=\\"phone\\" />\\n          </label>\\n          <legend>Company information</legend>\\n          <label>\\n            Company name:\\n            <input [(ngModel)]=\\"model.companyName\\" name=\\"companyName\\" />\\n          </label>\\n          <label>\\n            Street:\\n            <input [(ngModel)]=\\"model.streetName\\" name=\\"streetName\\" />\\n          </label>\\n          <label>\\n            City:\\n            <input [(ngModel)]=\\"model.city\\" name=\\"city\\" />\\n          </label>\\n          <label>\\n            Postal code:\\n            <input [(ngModel)]=\\"model.postalCode\\" name=\\"state\\" />\\n          </label>\\n          <input type=\\"submit\\" value=\\"Submit\\" (click)=\\"requestQuote()\\" />\\n        </fieldset>\\n      </form>\\n    </div>\\n\\n    <div *ngIf=\\"isSubmitted\\">\\n      <h3>Thank you for your request!</h3>\\n      <p>We will contact you shortly.</p>\\n    </div>\\n```"},{"id":"tutorial - verge3d viewer","metadata":{"permalink":"/blog/tutorial - verge3d viewer","editUrl":"https://github.com/elfsquad/docs/edit/main/blog/2021-01-28-verge3d.md","source":"@site/blog/2021-01-28-verge3d.md","title":"Tutorial - Custom viewer based on Verge3D","description":"Quick overview","date":"2021-01-28T00:00:00.000Z","tags":[{"inline":true,"label":"showroom","permalink":"/blog/tags/showroom"},{"inline":true,"label":"verge3d","permalink":"/blog/tags/verge-3-d"}],"readingTime":3.44,"hasTruncateMarker":false,"authors":[{"name":"Johannes Heesterman","title":"Lead Software Engineer @ Elfsquad","url":"https://github.com/johannesheesterman","imageURL":"https://avatars.githubusercontent.com/u/7443666?v=4","key":null,"page":null}],"frontMatter":{"slug":"tutorial - verge3d viewer","title":"Tutorial - Custom viewer based on Verge3D","author":"Johannes Heesterman","author_title":"Lead Software Engineer @ Elfsquad","author_url":"https://github.com/johannesheesterman","author_image_url":"https://avatars.githubusercontent.com/u/7443666?v=4","tags":["showroom","verge3d"]},"unlisted":false,"prevItem":{"title":"Tutorial - Custom configurator in Angular","permalink":"/blog/tutorial - custom configurator in Angular"},"nextItem":{"title":"Tutorial - Custom configurator","permalink":"/blog/tutorial - custom configurator"}},"content":"## Quick overview\\n\\nVerge3D is a 3D viewer that can be used to bring your Blender, 3ds Max or Maya scene to life in the browser. For more information on how to use it, please refer to the [Verge3D documentation](https://www.soft8soft.com/verge3d/).\\n\\nUsing the Elfsquad Verge3D blocks, you can easily create interactions between the Showroom and your 3D scene. An overview of the available blocks and other examples can be found [on GitHub](https://github.com/Elfsquad/verge3d).\\n\\n## Installing the Elfsquad Verge3D blocks\\nPlugins can be installed by unzipping the zip file inside Verge3D\'s **puzzles/plugins** directory. The default location for the plugins should be: **C:\\\\Program Files\\\\Verge3D_for_Blender\\\\puzzles\\\\plugins**.\\n\\n1. Download the latest version [here](https://github.com/Elfsquad/verge3d/archive/refs/tags/1.0.0.zip).\\n2. Create a directory called **Elfsquad** inside the **puzzles/plugins** directory.\\n3. Extract the contents of the .zip file inside the **Elfsquad** directory.\\n\\nA list of all releases can be found [here](https://github.com/Elfsquad/verge3d/releases).\\n\\n## Setting the example scene in Verge3D\\nThe Elfsquad Verge3D plugin provides sample scenes for the Showroom. These can be found in the **Examples** directory.\\n\\nIf you would like to use the sample scene, you can copy the contents of the **Examples** directory to the verge3d applications folder.\\n\\n1. Locate the applications folder of your Verge3D project. This is the folder where the Verge3D App Manager stores its data. The default location should be: **%USERPROFILE%\\\\verge3d_apps**\\n![Verge3D App Manager](/img/tutorial/verge3d/verge-app-manager-settings.png)\\n2. Move the **parametric_models** directory from the plugin\'s **Examples** directory into the applications folder.\\n![Verge3D application folder](/img/tutorial/verge3d/verge_apps_folder.png)\\n\\nThis should add a new entry to your Verge3D App Manager: Parametric Models. This is a modified version of the original Parameteric Models sample scene, that interacts with the Showroom, using the newly added Elfsquad Verge3D blocks.\\n\\nA block has been added to listen to configuration updates and update the configuration model accordingly:\\n\\n![On configuration update sample](/img/tutorial/verge3d/example1.png)\\n\\nUpdate requirement actions have been added to the UI buttons to tell the configurator to update the configuration model:\\n\\n![On update sample](/img/tutorial/verge3d/example3.png)\\n\\nA JavasScript block has been added to trigger the *On configuration update* event when the scene is fully loaded:\\n\\n![On scene load sample](/img/tutorial/verge3d/example2.png)\\n\\n## Available puzzle blocks\\nAs you can see in the examples, the Elfsquad Verge3D plugin provides several puzzle blocks that can be used to interact with the configurator.\\n\\n### Events\\n\\n#### On configuration update\\n\\n![On configuration update block](/img/tutorial/verge3d/on_configuration_update.png)\\n\\nThis block is called when the configuration is updated.\\n\\n### Actions\\n\\n#### Get value by code\\n\\n![Get value by code block](/img/tutorial/verge3d/get_value_by_code.png)\\n\\nThis block can be used to retrieve the value of a feature by its feature code.\\n\\n#### Get value by name\\n\\n![Get value by name block](/img/tutorial/verge3d/get_value_by_name.png)\\n\\nThis block can be used to retrieve the value of a feature by its feature name.\\n\\n#### Update requirement by code\\n\\n![Update requirement by code block](/img/tutorial/verge3d/update_requirement_by_code.png)\\n\\nThis block can be used to update the requirement of a feature by its feature code.\\n\\n\\n## Setting up the Showroom\\n\\n### Configuration model\\n\\nIn order to fully interact with the sample Verge3D scene, we need to setup a configuration model that has 3 features: Height, Thickness, and Corners. \\n\\nThe `Update requirement [Feature code] Value` block uses the feature code to update the requirements of the features in the Verge3D scene. For the sample scene to work, we need to create 3 features in our model with the codes: `height`, `thickness`, and `corners`:\\n\\n![Sample model](/img/tutorial/verge3d/sample_model.png)\\n\\n\\n### Third party visualization step\\n\\nNow we can add a step to the configuration model to display our Verge3D scene, using the following settings:\\n* Type: Third party visualization\\n* Third party visualization url: http://localhost:8668/applications/parametric_models/index.html\\n* Send data on \'configurationUpdate\': *checked*\\n\\n![Step editor](/img/tutorial/verge3d/step_editor.png)\\n\\n## Result\\n\\nWith the setup done we can open the example model in the showroom and should see the following result:\\n\\n![Result](/img/tutorial/verge3d/result.gif)\\n\\n\\n## Changelog\\n\\n- 2024-07-01: Updated installation instructions to reflect Verge3D version 4.6.0"},{"id":"tutorial - custom configurator","metadata":{"permalink":"/blog/tutorial - custom configurator","editUrl":"https://github.com/elfsquad/docs/edit/main/blog/2020-11-25-custom-configurator.md","source":"@site/blog/2020-11-25-custom-configurator.md","title":"Tutorial - Custom configurator","description":"Quick overview","date":"2020-11-25T00:00:00.000Z","tags":[{"inline":true,"label":"configurator","permalink":"/blog/tags/configurator"}],"readingTime":2.33,"hasTruncateMarker":false,"authors":[{"name":"Johannes Heesterman","title":"Lead Software Engineer @ Elfsquad","url":"https://github.com/johannesheesterman","imageURL":"https://avatars.githubusercontent.com/u/7443666?v=4","key":null,"page":null}],"frontMatter":{"slug":"tutorial - custom configurator","title":"Tutorial - Custom configurator","author":"Johannes Heesterman","author_title":"Lead Software Engineer @ Elfsquad","author_url":"https://github.com/johannesheesterman","author_image_url":"https://avatars.githubusercontent.com/u/7443666?v=4","tags":["configurator"]},"unlisted":false,"prevItem":{"title":"Tutorial - Custom viewer based on Verge3D","permalink":"/blog/tutorial - verge3d viewer"}},"content":"## Quick overview\\n\\nIn this tutorial I will provide a quick overview of the endpoints that\\ncan be used to implement your own customer-facing configurator.\\n\\n### Step 1. Retrieve a list of configuration models.\\n\\nThe first thing we want to do is provide the user with a selection of\\navailable configuration models. In order to achieve this we can use the\\n[configuration models endpoint](https://docs.elfsquad.io/apis/configurator#tag/Configurator/paths/~1configurator~1{version}~1configurator~1configurationmodels/get)\\n\\n`GET /configurator/1/configurator/configurationmodels`\\n\\n### Step 2. Start a new configuration\\n\\nWhen a user has selected a configuration model to be configured, we can\\nuse the `featureModelId` property to start a new configuration session.\\nWe use the [start configuration endpoint](https://docs.elfsquad.io/apis/configurator#tag/Configurator/paths/~1configurator~1{version}~1configurator~1new~1{featureModelName}/get) \\nfor this.\\n\\n`GET /configurator/1/configurator/new/{featureModelId}`\\n\\nResult (*Some data has been emitted for clarity.*):\\n\\n```json\\n{\\n  \\"id\\": \\"9c83b007-7e61-4b4c-9920-f125606844d5\\",\\n  \\"currencyIso\\": \\"eur\\",\\n  \\"currency\\": {\\n    \\"iso\\": \\"eur\\",\\n    \\"name\\": \\"Euro\\",\\n    \\"symbol\\": \\"\\\\u20ac\\",\\n    \\"decimalDigits\\": 2,\\n    \\"rounding\\": 0,\\n    \\"namePlural\\": \\"Euros\\",\\n    \\"isDefault\\": false\\n  },\\n  \\"languageIso\\": \\"nl\\",\\n  \\"countryIso\\": \\"nl\\",\\n  \\"featureModelId\\": \\"b8230fc6-454c-4190-a33a-08d5640714ca\\",\\n  \\"featureModel\\": ..., \\n  \\"values\\": {\\n    \\"7bcf2363-4300-4a6a-faa9-08d5640714d2\\": 1,\\n    \\"580b4519-1a7a-46f9-fa7d-08d5640714d2\\": 4,\\n    \\"8c81fabc-eaed-41e2-8ec2-08d5d10145ad\\": 4,\\n    \\"e22f606d-3e4e-462e-8ec3-08d5d10145ad\\": 72,\\n    ...\\n  },\\n  \\"conflicts\\": null,\\n  \\"basePrice\\": 42750,\\n  \\"basePriceLabel\\": \\"\\\\u20ac 42.750,00\\",\\n  \\"basePriceIncVAT\\": 42750,\\n  \\"basePriceIncVATLabel\\": \\"\\\\u20ac 42.750,00\\",\\n  \\"basePriceExVAT\\": 42750,\\n  \\"basePriceExVATLabel\\": \\"\\\\u20ac 42.750,00\\",\\n  \\"additionalPrice\\": 10730,\\n  \\"additionalPriceLabel\\": \\"\\\\u20ac 10.730,00\\",\\n  \\"additionalPriceIncVAT\\": 10730,\\n  \\"additionalPriceIncVATLabel\\": \\"\\\\u20ac 10.730,00\\",\\n  \\"additionalPriceExVAT\\": 10730,\\n  \\"additionalPriceExVATLabel\\": \\"\\\\u20ac 10.730,00\\",\\n  \\"totalPrice\\": 53480,\\n  \\"totalPriceLabel\\": \\"\\\\u20ac 53.480,00\\",\\n  \\"totalPriceExVAT\\": 53480,\\n  \\"totalPriceExVATLabel\\": \\"\\\\u20ac 53.480,00\\",\\n  \\"totalPriceIncVAT\\": 53480,\\n  \\"totalPriceIncVATLabel\\": \\"\\\\u20ac 53.480,00\\",\\n  \\"leasePrices\\": null,\\n  \\"leasePricesLabels\\": null\\n}\\n```\\n\\nOverview of important configuration properties:\\n\\n| Name         | Type     | Description                                                  |\\n| ------------ | -------- | ------------------------------------------------------------ |\\n| Id           | `Guid`   | Identifier of the configuration session. This id is used for updating configuration values and requesting a quotation. |\\n| FeatureModel | `object` | Object that represents the entire configuration model. This object should be used to build the configurator UI. |\\n| Values       | `object` | Object that contains all values of the configuration. The key represents the identifier of a feature model node. The value represents the selected value for that particular node. |\\n| Conflicts    | `object` | If a conflict occurs during the configuration process this object will be filled with conflicting nodes and solution options. |\\n\\n### Step 3. Update value\\n\\nIn order to update a value for a particular option we use the [update\\nrequirement endpoint](https://docs.elfsquad.io/apis/configurator/#tag/Configurator/paths/~1configurator~1{version}~1configurator~1{configurationId}/put)\\n\\n`PUT /configurator/1/configurator/{configurationId}?ignoreConflicts=true`\\n\\n* The `ignoreConflicts` parameter is optional. When this parameter is\\n  set to true the configurator will automatically resolve any conflicts\\n  that might occur.\\n\\nRequest body:\\n\\n`{featureModelNodeId: \\"949af91c-8a0b-4540-fa87-08d5640714d2\\", value: 1}`\\n\\n| Name               | Type     | Description                                                  |\\n| ------------------ | -------- | ------------------------------------------------------------ |\\n| featureModelNodeId | `Guid`   | Identifier of the feature model node.                        |\\n| value              | `number` | User-selected value for the option. 0 for false, 1 for true, or any other number when the option is provided as an input field. |"}]}}')}}]);