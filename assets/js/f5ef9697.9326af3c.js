"use strict";(self.webpackChunkelfsquad=self.webpackChunkelfsquad||[]).push([[98424],{43410:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var i=n(74848),r=n(28453),s=n(74387),a=n(52138);const o={title:"\ud83d\udcca Generating 2D Step Images",sidebar_position:3,sidebar_label:"Generating 2D Step Images",slug:"./generating-2d-step-images",hide_table_of_contents:!0},c="Generating 2D Step Images",l={id:"configurator/guides/generating-2d-step-image",title:"\ud83d\udcca Generating 2D Step Images",description:"This guide covers the process of setting up and generating 2D step images within the EMS. You will learn how to use the API to retrieve metadata and construct the step image effectively.",source:"@site/docs/configurator/guides/generating-2d-step-image.md",sourceDirName:"configurator/guides",slug:"/configurator/guides/generating-2d-step-images",permalink:"/docs/configurator/guides/generating-2d-step-images",draft:!1,unlisted:!1,editUrl:"https://github.com/elfsquad/docs/edit/main/docs/configurator/guides/generating-2d-step-image.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"\ud83d\udcca Generating 2D Step Images",sidebar_position:3,sidebar_label:"Generating 2D Step Images",slug:"./generating-2d-step-images",hide_table_of_contents:!0},sidebar:"configuratorSidebar",previous:{title:"Visualization IFrame API",permalink:"/docs/configurator/Third-party-visualization"},next:{title:"elfsquad/authentication",permalink:"/docs/configurator/libraries/elfsquad-authentication-library"}},d={},u=[{value:"1. Retrieve the <code>2dlayout</code>",id:"1-retrieve-the-2dlayout",level:3},{value:"2. Construct the step image",id:"2-construct-the-step-image",level:3},{value:"3. Result",id:"3-result",level:3}];function g(e){const t={code:"code",h1:"h1",h3:"h3",p:"p",...(0,r.R)(),...e.components};return(0,i.jsxs)(s.o,{children:[(0,i.jsxs)(s.v,{children:[(0,i.jsx)(t.h1,{id:"generating-2d-step-images",children:"Generating 2D Step Images"}),(0,i.jsx)(t.p,{children:"This guide covers the process of setting up and generating 2D step images within the EMS. You will learn how to use the API to retrieve metadata and construct the step image effectively."})]}),(0,i.jsxs)(s.v,{highlight:"{1-3}",children:[(0,i.jsxs)(t.h3,{id:"1-retrieve-the-2dlayout",children:["1. Retrieve the ",(0,i.jsx)(t.code,{children:"2dlayout"})]}),(0,i.jsxs)(t.p,{children:["To begin, you must retrieve the ",(0,i.jsx)(t.code,{children:"2dlayout"})," from the designated endpoint.\nThis data structure contains URLs and z-index values essential for\nconstructing the step image. Ensure to include the ",(0,i.jsx)(t.code,{children:"stepId"})," in your\nquery to retrieve the correct layout."]})]}),(0,i.jsxs)(s.v,{highlight:"{8-15}",children:[(0,i.jsx)(t.h3,{id:"2-construct-the-step-image",children:"2. Construct the step image"}),(0,i.jsxs)(t.p,{children:["With the ",(0,i.jsx)(t.code,{children:"2dlayout"})," retrieved, you can now stack the images based on\ntheir z-values to construct the final step image. The example below\ndemonstrates how to use the HTML canvas element to achieve this."]})]}),(0,i.jsxs)(s.v,{highlight:"{5-6,16}",children:[(0,i.jsx)(t.h3,{id:"3-result",children:"3. Result"}),(0,i.jsx)(t.p,{children:"Following the steps above, you will be able to generate a 2D step image\nthat dynamically updates based on the configuration. This method ensures\nthat your visualizations are always current and accurate."})]}),(0,i.jsx)(a.default,{language:"js",children:"const configuratorContext = new ConfiguratorContext();\nconst layout2d = configuratorContext.getLayout2d();\nconst sortedLayout = layout2d.sort((a, b) => a.z - b.z);\n\nconst canvas = document.createElement('canvas');\nconst ctx = canvas.getContext('2d');\n\nfor(const item of layout) {\n  const img = new Image();\n  img.src = item.url;\n  img.onload = () => {\n    ctx.drawImage(img, 0, 0);\n  };\n}\n\nconst stepImage = canvas.toDataURL();"})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}},14168:(e,t,n)=>{n.d(t,{A:()=>r});n(96540);var i=n(74848);function r(e){return(0,i.jsx)(i.Fragment,{children:e.children})}},74387:(e,t,n)=>{n.d(t,{o:()=>o,v:()=>a});var i=n(96540),r=n(14168),s=n(52138);const a=e=>{let{children:t}=e;return i.createElement("div",null,t)},o=e=>{let{children:t}=e;const[n,o]=(0,i.useState)(null),[l,d]=(0,i.useState)(""),[u,g]=(0,i.useState)(-1),h=i.Children.toArray(t).filter((e=>i.isValidElement(e))),m=h.find((e=>e.type===s.default||e.type===r.A)),p=h.filter((e=>e.type===a)),f=i.useRef(null),v=p.map((()=>i.useRef(null))),y=e=>{var t;if(!(null===(t=p[e])||void 0===t?void 0:t.props.highlight))return;if(e<0||e>=p.length)return;if(e==u)return;if(g(e),d(p[e].props.highlight),!f.current)return;const n=f.current.getElementsByClassName("theme-code-block-highlighted-line");n.length>0&&setTimeout((()=>{f.current&&(f.current.scrollTop=n[0].offsetTop-24)}),200)},x=()=>{const e=window.scrollY+c(),t=v.findIndex((t=>!!t.current&&t.current.offsetTop>e));t!=u&&y(t)};return(0,i.useEffect)((()=>((()=>{if(!f.current)return;const e=f.current.getBoundingClientRect(),t=window.innerHeight||document.documentElement.clientHeight,n=Math.floor(Math.max(0,Math.min(e.bottom,t)-Math.max(e.top,0)));o(n-32)})(),window.removeEventListener("scroll",x),window.addEventListener("scroll",x,{passive:!0}),y(0),()=>window.removeEventListener("scroll",x))),[]),i.createElement("div",{className:"codedoc-container"},i.createElement("div",null,p.map(((e,t)=>i.createElement("div",{key:t,ref:v[t],className:"codedoc-section "+(u==t?"active":""),onClick:()=>y(t)},i.createElement(a,Object.assign({},e.props)))))),i.createElement("div",{ref:f,style:{height:`${n}px`,top:`${c()}px`},className:"codedoc-code-container"},m&&i.createElement(s.default,Object.assign({},m.props,{metastring:l,key:l}))))},c=()=>{if("undefined"==typeof getComputedStyle)return 0;const e=getComputedStyle(document.documentElement).getPropertyValue("--ifm-navbar-height");return e?e.includes("px")?parseInt(e.replace("px","")):e.includes("rem")?Math.floor(parseInt(e.replace("rem",""))*parseFloat(getComputedStyle(document.documentElement).fontSize)):0:0}}}]);