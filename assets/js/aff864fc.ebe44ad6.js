"use strict";(self.webpackChunkelfsquad=self.webpackChunkelfsquad||[]).push([[7623],{21198:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var t=r(74848),i=r(28453);const a={title:"Python Integration with Archer",sidebar_position:2,sidebar_label:"Python integration",slug:"./python"},s=void 0,o={id:"archer/archer-ml-python",title:"Python Integration with Archer",description:"Archer offers seamless integration with Python, enabling users to incorporate Python scripts into their Archer models directly. This guide provides a detailed explanation of this integration, showcasing its versatility and ease of use.",source:"@site/docs/archer/archer-ml-python.md",sourceDirName:"archer",slug:"/archer/python",permalink:"/docs/archer/python",draft:!1,unlisted:!1,editUrl:"https://github.com/elfsquad/docs/edit/main/docs/archer/archer-ml-python.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Python Integration with Archer",sidebar_position:2,sidebar_label:"Python integration",slug:"./python"},sidebar:"archerSidebar",previous:{title:"Overview",permalink:"/docs/archer/"}},l={},d=[{value:"Including a Python Script",id:"including-a-python-script",level:2},{value:"Sample Python Script",id:"sample-python-script",level:2},{value:"Accessing and Setting Variable Properties",id:"accessing-and-setting-variable-properties",level:2},{value:"Incorporating Additional Constraints",id:"incorporating-additional-constraints",level:2},{value:"Using the <code>traverse</code> Method",id:"using-the-traverse-method",level:2},{value:"Available hooks:",id:"available-hooks",level:2}];function c(e){const n={code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Archer offers seamless integration with Python, enabling users to incorporate Python scripts into their Archer models directly. This guide provides a detailed explanation of this integration, showcasing its versatility and ease of use."}),"\n",(0,t.jsx)(n.h2,{id:"including-a-python-script",children:"Including a Python Script"}),"\n",(0,t.jsxs)(n.p,{children:["To bring a Python script into your Archer model, utilize the ",(0,t.jsx)(n.code,{children:"import"})," directive:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-archer",children:'model Phone {\n  import "filename.py"  // Reference to the Python script\n\n  Phone - mandatory -> Screen\n  ...\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"sample-python-script",children:"Sample Python Script"}),"\n",(0,t.jsx)(n.p,{children:"Consider the following Python script:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@after_update()\ndef method_after_update():\n  values = fetchValuesFromExternalApi()\n  sumOfValues = sum(values)\n\n  assign_property('Feature1.ExternalValues', values)\n\n  add_constraint(lambda: model.Feature2.Value > sumOfValues)\n"})}),"\n",(0,t.jsx)(n.p,{children:"This script highlights the three primary features of Archer's Python integration:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Event hooks"}),": Call Python functions at specific points in the configuration's lifecycle."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Direct Property Assignment:"})," You can assign values from your Python script directly to variables in your Archer model, using the ",(0,t.jsx)(n.code,{children:"assign_property"})," method."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Constraint Addition:"})," Use the ",(0,t.jsx)(n.code,{children:"add_constraint"})," function to introduce new constraints."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"accessing-and-setting-variable-properties",children:"Accessing and Setting Variable Properties"}),"\n",(0,t.jsxs)(n.p,{children:["The Python integration introduces a global ",(0,t.jsx)(n.code,{children:"model"})," object. Through this, you can interface with Archer model variables."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"value = model['VariableName']['Value']\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["Note: The ",(0,t.jsx)(n.code,{children:"Selected"})," and ",(0,t.jsx)(n.code,{children:"Value"})," properties start with uppercase letters."]})}),"\n",(0,t.jsx)(n.p,{children:"To assign a value to a model variable's property:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"valueCalculatedFromApi = fetchValueFromApi()\n\nassign_property('VariableName.PropertyName', valueCalculatedFromApi)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Python integration supports assignment of intricate object structures, including arrays:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"assign_property('VariableName.ComplexObjectPropertyName', {\n  'NestedObject': {\n    ExampleValue: 123,\n    ExampleArray: [1, 2, 3],\n    'NestedNestedObject': {\n      ObjectValue: True\n    }\n  }\n})\n"})}),"\n",(0,t.jsx)(n.p,{children:"Such complex structures are fully accessible within your Archer model:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-archer",children:"model Example {\n  Example - mandatory -> VariableName\n  Example - optional -> Option1\n\n  // Option1 visibility is contingent upon ObjectValue being true\n  condition Option1 = VariableName.NestedObject.NestedNestedObject.ObjectValue\n\n  // Using values from ExampleArray to determine Option1's lower bound value\n  forall v in VariableName.NestedObject.ExampleArray {\n    lower_bound Option1 = v * 2\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"incorporating-additional-constraints",children:"Incorporating Additional Constraints"}),"\n",(0,t.jsx)(n.p,{children:"Augment your Archer model with constraints defined in Python:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"pythonValue = 123\n\nadd_constraint(lambda: model['Variable1']['Value'] >= model['Variable2']['Value'] * pythonValue)\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"using-the-traverse-method",children:["Using the ",(0,t.jsx)(n.code,{children:"traverse"})," Method"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"traverse"})," method facilitates iteration over child variables of a given parent variable:"]}),"\n",(0,t.jsx)(n.p,{children:"Given this Archer model:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-archer",children:"model Example {\n  Example - mandatory -> Group\n  Group - optional -> Option1\n  Group - optional -> Option2\n  Group - optional -> Option3\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can loop over all of ",(0,t.jsx)(n.code,{children:"Group"}),"'s options:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"for c in traverse(model['Group']):\n  add_constraint(lambda: c.Value > 10)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"available-hooks",children:"Available hooks:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Decorator"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Before update"}),(0,t.jsx)(n.td,{children:"@before_update"}),(0,t.jsx)(n.td,{children:"Invoked before a user requirement is updated in the solver."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"After update"}),(0,t.jsx)(n.td,{children:"@after_update"}),(0,t.jsx)(n.td,{children:"Invoked after a user requirement is updated in the solver."})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);