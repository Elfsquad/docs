"use strict";(self.webpackChunkelfsquad=self.webpackChunkelfsquad||[]).push([[15244],{61051:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=t(74848),i=t(28453);const r={slug:"tutorial - custom configurator in Angular",title:"Tutorial - Custom configurator in Angular",author:"Stan van Rooy",author_title:"DevOps @ Elfsquad",author_url:"https://github.com/stanvanrooy",author_image_url:"https://avatars.githubusercontent.com/u/49564025?v=4",tags:["angular","configurator"]},a=void 0,s={permalink:"/blog/tutorial - custom configurator in Angular",editUrl:"https://github.com/elfsquad/docs/edit/main/blog/2022-09-20-customer-configurator-angular-updated.md",source:"@site/blog/2022-09-20-customer-configurator-angular-updated.md",title:"Tutorial - Custom configurator in Angular",description:"In this tutorial, I will provide a quick overview of how to implement",date:"2022-09-20T00:00:00.000Z",tags:[{label:"angular",permalink:"/blog/tags/angular"},{label:"configurator",permalink:"/blog/tags/configurator"}],readingTime:8.445,hasTruncateMarker:!1,authors:[{name:"Stan van Rooy",title:"DevOps @ Elfsquad",url:"https://github.com/stanvanrooy",imageURL:"https://avatars.githubusercontent.com/u/49564025?v=4"}],frontMatter:{slug:"tutorial - custom configurator in Angular",title:"Tutorial - Custom configurator in Angular",author:"Stan van Rooy",author_title:"DevOps @ Elfsquad",author_url:"https://github.com/stanvanrooy",author_image_url:"https://avatars.githubusercontent.com/u/49564025?v=4",tags:["angular","configurator"]},unlisted:!1,prevItem:{title:"Tutorial - Integrate Sketchfab viewer with Elfsquad",permalink:"/blog/tutorial - sketchfab viewer"},nextItem:{title:"Tutorial - Custom viewer based on Verge3D",permalink:"/blog/tutorial - verge3d viewer"}},l={authorsImageUrls:[void 0]},c=[{value:"Setting up a new Angular project",id:"setting-up-a-new-angular-project",level:2},{value:"Creating the project",id:"creating-the-project",level:3},{value:"Installing dependencies",id:"installing-dependencies",level:3},{value:"Adding some basic html/css",id:"adding-some-basic-htmlcss",level:3},{value:"Creating the configurator context",id:"creating-the-configurator-context",level:3},{value:"Creating the product overview page",id:"creating-the-product-overview-page",level:2},{value:"Adding the product overview route",id:"adding-the-product-overview-route",level:3},{value:"Retrieving the configuration models",id:"retrieving-the-configuration-models",level:3},{value:"Displaying the configuration models",id:"displaying-the-configuration-models",level:3},{value:"Creating the configurator page",id:"creating-the-configurator-page",level:2},{value:"Starting a new configuration",id:"starting-a-new-configuration",level:3},{value:"Displaying the steps",id:"displaying-the-steps",level:3},{value:"Creating the feature component",id:"creating-the-feature-component",level:2},{value:"Toggling features on/off",id:"toggling-features-onoff",level:3},{value:"Displaying the feature",id:"displaying-the-feature",level:3},{value:"Requesting a quote",id:"requesting-a-quote",level:2},{value:"Creating the checkout page",id:"creating-the-checkout-page",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"In this tutorial, I will provide a quick overview of how to implement\nyour customer-facing showroom in Angular."}),"\n",(0,o.jsxs)(n.p,{children:["You can find the resulting project in the ",(0,o.jsx)(n.a,{href:"https://github.com/elfsquad/showroom-example",children:"showroom-example\nrepository"})," on our Github."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["\u2139\ufe0f If you\u2019re not familiar with Angular, you can follow the ",(0,o.jsx)(n.a,{href:"https://angular.io/start",children:"Angular\ngetting started guide"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"setting-up-a-new-angular-project",children:"Setting up a new Angular project"}),"\n",(0,o.jsx)(n.p,{children:"Create a new Angular project using the Angular CLI."}),"\n",(0,o.jsx)(n.h3,{id:"creating-the-project",children:"Creating the project"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"    ng new ShowroomExample --routing=true --style=css\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Once that\u2019s finished, you should be able to run the application and open\nit on ",(0,o.jsx)(n.a,{href:"http://localhost:4200",children:"localhost:4200"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"    ng serve\n"})}),"\n",(0,o.jsx)(n.h3,{id:"installing-dependencies",children:"Installing dependencies"}),"\n",(0,o.jsxs)(n.p,{children:["For this tutorial, we\u2019ll make use of the\n",(0,o.jsx)(n.a,{href:"https://github.com/elfsquad/authentication",children:"@elfsquad/authentication"}),"\nand ",(0,o.jsx)(n.a,{href:"https://github.com/elfsquad/configurator",children:"@elfsquad/configurator"}),"\npackages."]}),"\n",(0,o.jsx)(n.p,{children:"These are developed and maintained by Elfsquad."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"    npm install @elfsquad/authentication\n    npm install @elfsquad/configurator\n"})}),"\n",(0,o.jsx)(n.h3,{id:"adding-some-basic-htmlcss",children:"Adding some basic html/css"}),"\n",(0,o.jsxs)(n.p,{children:["In the ",(0,o.jsx)(n.code,{children:"index.html"}),", we add a little bit of styling:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'    <style>\n        * {\n          font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n        }\n\n        body, p {\n          margin: 0;\n          padding: 0;\n        }\n    </style>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["And in the ",(0,o.jsx)(n.code,{children:"app.component.html"})," file, we\u2019ll remove everything but the\n",(0,o.jsx)(n.code,{children:"<router-outlet></router-outlet>"})," tag."]}),"\n",(0,o.jsx)(n.h3,{id:"creating-the-configurator-context",children:"Creating the configurator context"}),"\n",(0,o.jsxs)(n.p,{children:["We communicate with the Elfsquad API through the ",(0,o.jsx)(n.code,{children:"ConfiguratorContext"}),".\nWe can initialize this class in the ",(0,o.jsx)(n.code,{children:"app.module.ts"})," file. The\nconfigurator context can be used for both anonymous and showrooms that\nrequire a logged in user."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"    import { NgModule } from '@angular/core';\n    import { BrowserModule } from '@angular/platform-browser';\n    import {ConfiguratorContext, IConfiguratorOptions} from '@elfsquad/configurator';\n    import {AuthenticationMethod} from '@elfsquad/configurator/dist/configurator/IConfiguratorOptions';\n\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { ProductOverviewComponent } from './product-overview/product-overview.component';\n    import { FormsModule } from '@angular/forms';\n\n    const options: IConfiguratorOptions = {\n      authenticationMethod: AuthenticationMethod.ANONYMOUS,\n      tenantId: '5dcd73c7-c0e9-44e8-85f3-dfef7553e8a2',\n    };\n\n    const configuratorContext = new ConfiguratorContext(options);\n\n    @NgModule({\n      declarations: [\n        AppComponent,\n        ProductOverviewComponent\n      ],\n      imports: [\n        BrowserModule,\n        AppRoutingModule,\n        FormsModule\n      ],\n      providers: [\n        { provide: ConfiguratorContext, useValue: configuratorContext }\n      ],\n      bootstrap: [AppComponent],\n    })\n    export class AppModule { }\n"})}),"\n",(0,o.jsx)(n.p,{children:"If you want to require a logged in user, you can need to change a few\nsnippets of code in the example above."}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Add the ",(0,o.jsx)(n.code,{children:"authenticationOptions"})," to the ",(0,o.jsx)(n.code,{children:"configuratorOptions"})," object:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"    const options = {\n      tenantId: '5dcd73c7-c0e9-44e8-85f3-dfef7553e8a2',\n      authenticationMethod: AuthenticationMethod.USER_LOGIN,\n      authenticationOptions: {\n        clientId: '60a98ec8-c9f7-4b4e-a809-0492f25b8037',\n        redirectUri: 'http://localhost:4200',\n      }\n    };\n"})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Check if the user is logged in and if not, redirect to the login\npage."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"    const configuratorContext = new ConfiguratorContext(options);\n    configuratorContext.authenticationContext.isSignedIn().then(signedIn => {\n      if (signedIn) {\n        return;\n      }\n      configuratorContext.authenticationContext.signIn();\n    });\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["\u26a0\ufe0f Make sure to replace the ",(0,o.jsx)(n.code,{children:"tenantId"})," with your tenant id"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"creating-the-product-overview-page",children:"Creating the product overview page"}),"\n",(0,o.jsxs)(n.p,{children:["We start by creating a ",(0,o.jsx)(n.code,{children:"ProductOverview"})," component. This component will\nshow all configuration models available."]}),"\n",(0,o.jsx)(n.p,{children:"ng generate component ProductOverview"}),"\n",(0,o.jsx)(n.h3,{id:"adding-the-product-overview-route",children:"Adding the product overview route"}),"\n",(0,o.jsxs)(n.p,{children:["Now that we\u2019ve created the component, we should register it as a route,\nso our users can access it. You can register the route by adding it to\nthe ",(0,o.jsx)(n.code,{children:"app-routing-module.ts"})," file."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"    import { NgModule } from '@angular/core';\n    import { RouterModule, Routes } from '@angular/router';\n    import {ProductOverviewComponent} from './product-overview/product-overview.component';\n\n    const routes: Routes = [\n      { path: '', component: ProductOverviewComponent },\n    ];\n\n    @NgModule({\n      imports: [RouterModule.forRoot(routes)],\n      exports: [RouterModule]\n    })\n    export class AppRoutingModule { }\n"})}),"\n",(0,o.jsx)(n.h3,{id:"retrieving-the-configuration-models",children:"Retrieving the configuration models"}),"\n",(0,o.jsxs)(n.p,{children:["The first step to creating the product overview is retrieving a list of\navailable configuration models. We can do this in the ",(0,o.jsx)(n.code,{children:"ngOnInit"})," method\nof the ",(0,o.jsx)(n.code,{children:"ProductOverview"})," component."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"    import { Component, Inject, OnInit } from '@angular/core';\n    import { ConfigurationModel, ConfiguratorContext } from '@elfsquad/configurator';\n\n    @Component({\n      selector: 'app-product-overview',\n      templateUrl: './product-overview.component.html',\n      styleUrls: ['./product-overview.component.css']\n    })\n    export class ProductOverviewComponent implements OnInit {\n      public configurationModels: ConfigurationModel[] = [];\n\n      constructor(\n        @Inject(ConfiguratorContext) private configuratorContext: ConfiguratorContext,\n      ) { }\n\n      ngOnInit(): void {\n        this.configuratorContext.getConfigurationModels().then(configurationModels => {\n          this.configurationModels = configurationModels.features;\n        });\n      }\n    }\n"})}),"\n",(0,o.jsx)(n.p,{children:"The configuration models should now be retrieved when you open the page."}),"\n",(0,o.jsx)(n.h3,{id:"displaying-the-configuration-models",children:"Displaying the configuration models"}),"\n",(0,o.jsxs)(n.p,{children:["To display those models, we create a grid overview in the\n",(0,o.jsx)(n.code,{children:"product-overview.component.html"})," file."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'    <div class="product-overview">\n      <div *ngFor="let model of configurationModels" class="product-card" [routerLink]="[\'configure\', model.featureModelId]">\n        <img [src]="model.imageUrl" />\n        <h3 [innerHTML]="model.description"></h3>\n      </div>\n    </div>\n'})}),"\n",(0,o.jsx)(n.p,{children:"And the following CSS:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-css",children:"    div.product-overview {\n      padding: 80px;\n      display: flex;\n      gap: 40px;\n      flex-wrap: wrap;\n      justify-content: center;\n    }\n\n    div.product-overview > div.product-card {\n      padding: 8px;\n      width: 28%;\n      box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;\n    }\n\n    div.product-overview > div.product-card > img {\n      height: auto;\n      width: 100%;\n    }\n"})}),"\n",(0,o.jsx)(n.h2,{id:"creating-the-configurator-page",children:"Creating the configurator page"}),"\n",(0,o.jsx)(n.p,{children:"Now that we have a product overview page, we can proceed to build the\nactual configurator. This is the page on which users can configure their\nmodel."}),"\n",(0,o.jsxs)(n.p,{children:["Let\u2019s start by creating a ",(0,o.jsx)(n.code,{children:"ConfiguratorComponent"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"    ng generate component Configurator\n"})}),"\n",(0,o.jsxs)(n.p,{children:["And registering a route to access the configurator page. Notice we use a\n",(0,o.jsx)(n.code,{children:":id"})," parameter in the path. This id can either be the name or the id of\na configuration model."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"    { path: 'configure/:id', component: ConfiguratorComponent }\n"})}),"\n",(0,o.jsx)(n.h3,{id:"starting-a-new-configuration",children:"Starting a new configuration"}),"\n",(0,o.jsx)(n.p,{children:"Once the user visits the configurator page, we need to start a new\nconfiguration. To do this, we\u2019ll:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Inject the ",(0,o.jsx)(n.code,{children:"ActivatedRoute"}),", from which we can retrieve the\nconfiguration model id"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Use the ",(0,o.jsx)(n.code,{children:"ConfiguratorContext"})," to start a new configuration"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Store the new configuration on the ",(0,o.jsx)(n.code,{children:"ConfiguratorComponent"})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Update ",(0,o.jsx)(n.code,{children:"ConfiguratorComponent.configuration"})," every time the\nconfiguration is updated."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"    import { Component, OnInit } from '@angular/core';\n    import { ActivatedRoute } from '@angular/router';\n    import { Configuration, ConfiguratorContext } from '@elfsquad/configurator';\n\n    @Component({\n      selector: 'app-configurator',\n      templateUrl: './configurator.component.html',\n      styleUrls: ['./configurator.component.css']\n    })\n    export class ConfiguratorComponent implements OnInit {\n      public configuration: Configuration | undefined;\n\n      constructor(\n        private route: ActivatedRoute,\n        private configuratorContext: ConfiguratorContext\n      ) { }\n\n      ngOnInit(): void {\n        this.route.params.subscribe(params => {\n          this.configuratorContext.newConfiguration(params['id'])\n            .then(configuration => {\n              this.configuration = configuration;\n            });\n          this.configuratorContext.onUpdate((e: CustomEvent) => {\n            this.configuration = e.detail;\n          });\n        });\n      }\n    }\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The resulting configuration object contains many different fields, all\nof which can be explored on\n",(0,o.jsx)(n.a,{href:"https://docs.elfsquad.io",children:"docs.elfsquad.io"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"This tutorial will focus mainly on steps and displaying the price."}),"\n",(0,o.jsxs)(n.p,{children:["The configuration object has a ",(0,o.jsx)(n.code,{children:"steps"})," property, which contains an array\nof all steps. A step contains features, and each feature can contain\n",(0,o.jsx)(n.em,{children:"child"})," features."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Title"}),"\n",(0,o.jsxs)(n.li,{children:["Features","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Description"}),"\n",(0,o.jsx)(n.li,{children:"UnitPrice"}),"\n",(0,o.jsx)(n.li,{children:"TotalPrice"}),"\n",(0,o.jsx)(n.li,{children:"Type"}),"\n",(0,o.jsxs)(n.li,{children:["Features (Children of the current feature, recursive)","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"..."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"..."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"displaying-the-steps",children:"Displaying the steps"}),"\n",(0,o.jsxs)(n.p,{children:["We will display only one step at a time. To do this, we\u2019ll add a\n",(0,o.jsx)(n.code,{children:"activeIndex"})," and functions to go the next/previous step to the\n",(0,o.jsx)(n.code,{children:"configurator.component.ts"})," file."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"      public activeIndex: number = 0;\n\n      public next() {\n        this.activeIndex += 1;\n      }\n\n      public previous() {\n        this.activeIndex -= 1;\n      }\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In the HTML, we\u2019ll iterate overall features in the step and display them\nby using the ",(0,o.jsx)(n.code,{children:"app-feature"})," tag. This is a component we\u2019ll create in the\nnext step."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'    <div *ngFor="let step of configuration?.steps ?? []; let i = index">\n      <div class="step" [class.active]="i === activeIndex">\n        <app-feature [configuration]="configuration" [feature]="feature" *ngFor="let feature of step.features"></app-feature>\n      </div>\n    </div>\n\n    <div class="footer">\n      <span>\n        <b>Total price:</b>\n        {{ configuration?.totalPrice | currency: \'EUR\': true }}\n      </span>\n      <br />\n      <button\n        [disabled]="activeIndex === 0"\n        (click)="previous()"\n      >\n        Previous\n      </button>\n      <button\n        [disabled]="activeIndex === (configuration?.steps ?? []).length - 1"\n        (click)="next()"\n      >\n        Next\n      </button>\n    </div>\n'})}),"\n",(0,o.jsx)(n.p,{children:"and CSS"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-css",children:"    div.step {\n      display: none;\n      max-width: 400px;\n    }\n\n    div.step.active {\n      display: block;\n    }\n\n    div.footer {\n      margin-top: 12px;\n      margin-left: 24px;\n    }\n"})}),"\n",(0,o.jsx)(n.h2,{id:"creating-the-feature-component",children:"Creating the feature component"}),"\n",(0,o.jsxs)(n.p,{children:["We show features using the ",(0,o.jsx)(n.code,{children:"app-feature"})," tag in the previous step. This\nis a new component that we\u2019re about to implement."]}),"\n",(0,o.jsx)(n.p,{children:"Because of the recursive nature of features, we need to create a new\ncomponent for them."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"    ng generate component Feature\n"})}),"\n",(0,o.jsx)(n.p,{children:"This component will take a feature as input."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"    import { Component, Input, OnInit } from '@angular/core';\n    import { ConfigurationFeature, Configuration } from '@elfsquad/configurator';\n\n    @Component({\n      selector: 'app-feature',\n      templateUrl: './feature.component.html',\n      styleUrls: ['./feature.component.css']\n    })\n    export class FeatureComponent implements OnInit {\n      @Input('feature') feature: ConfigurationFeature | undefined;\n      @Input('configuration') configuration: Configuration | undefined;\n\n      constructor( ) { }\n\n      ngOnInit(): void { }\n    }\n"})}),"\n",(0,o.jsx)(n.h3,{id:"toggling-features-onoff",children:"Toggling features on/off"}),"\n",(0,o.jsxs)(n.p,{children:["For this example, we\u2019ll only enable toggling features on and off, so\nwe\u2019ll only have to implement the ",(0,o.jsx)(n.code,{children:"toggle()"})," function."]}),"\n",(0,o.jsx)(n.p,{children:"This function will (de)select an option within the configuration model."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"      toggle(): void {\n        if (!this.feature)\n          return;\n\n        if (!this.configuration)\n          return;\n\n        const value = this.feature.isSelected ? 0 : 1;\n        this.configuration.updateRequirement(\n          this.feature.id,\n          this.feature.isSelected,\n          value\n        );\n      }\n"})}),"\n",(0,o.jsx)(n.h3,{id:"displaying-the-feature",children:"Displaying the feature"}),"\n",(0,o.jsxs)(n.p,{children:["For displaying features, we\u2019ll add some HTML to the\n",(0,o.jsx)(n.code,{children:"feature.component.html"})," file."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'    <div class="feature">\n      <div class="header">\n        <span [innerHTML]="feature?.description"></span>\n        <input\n         type="checkbox"\n         [checked]="feature?.isSelected"\n         (click)="toggle()"\n         *ngIf="feature?.type === 0"\n        />\n        <input\n         type="radio"\n         [checked]="feature?.isSelected"\n         (click)="toggle()"\n         *ngIf="feature?.type === 2"\n        />\n      </div>\n      <span *ngIf="feature?.minValue == feature?.maxValue && feature?.value != 0 && feature?.value != 1">\n        {{feature?.value}} {{feature?.unitOfMeasurement}}\n      </span>\n      <span>{{feature?.unitPrice}}</span>\n      <app-feature\n        [configuration]="configuration"\n        [feature]="f"\n        *ngFor="let f of feature?.features"\n        ></app-feature>\n    </div>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["And add the css below to ",(0,o.jsx)(n.code,{children:"feature.component.css"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-css",children:"    div.feature {\n      width: 100%;\n      height: 100%;\n      margin-left: 24px;\n      margin-bottom: 6px;\n    }\n\n    div.feature > div.header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n    }\n"})}),"\n",(0,o.jsx)(n.h2,{id:"requesting-a-quote",children:"Requesting a quote"}),"\n",(0,o.jsx)(n.p,{children:"Now that we are able to configure a product, we can go ahead and request\na quotation. We\u2019ll add a button to the configurator page:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:"    <button [routerLink]=\"['/checkout', configuration?.id]\">Request quote</button>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"creating-the-checkout-page",children:"Creating the checkout page"}),"\n",(0,o.jsxs)(n.p,{children:["As before, we\u2019ll start by creating the ",(0,o.jsx)(n.code,{children:"Checkout"})," component."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"    ng generate component Checkout\n"})}),"\n",(0,o.jsxs)(n.p,{children:["and add the route to the ",(0,o.jsx)(n.code,{children:"app-routing.module.ts"})," file. In this route,\nthe id stands for the configuration id."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"      { path: 'checkout/:id', component: CheckoutComponent }\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In the ",(0,o.jsx)(n.code,{children:"checkout.component.ts"})," file, we\u2019ll create a function to request\na quote"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"     import { Component, OnInit } from '@angular/core';\nimport { ConfiguratorContext, QuotationRequest } from '@elfsquad/configurator';\n\n@Component({\n  selector: 'app-checkout',\n  templateUrl: './checkout.component.html',\n  styleUrls: ['./checkout.component.css']\n})\nexport class CheckoutComponent implements OnInit {\n\n  constructor(private configuratorContext : ConfiguratorContext) { }\n\n  ngOnInit(): void {\n  }\n  public isSubmitted = false;\n  public model: QuotationRequest = {};\n\n  requestQuote() {\n    this.configuratorContext.requestQuote(this.model).then(_ => {\n      this.isSubmitted = true;\n    });\n  }\n}\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"The checkout page itself, is divided into two sections. One before the\nrequest is submitted, and one afterward:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'    <h3>Request quote</h3>\n\n    <div *ngIf="!isSubmitted">\n      <form>\n        <fieldset>\n          <legend>Contact information</legend>\n          <label>\n            First name:\n            <input [(ngModel)]="model.firstName" name="firstName" />\n          </label>\n          <label>\n            Last name:\n            <input [(ngModel)]="model.lastName" name="lastName" />\n          </label>\n          <label>\n            Email:\n            <input [(ngModel)]="model.email" name="email" />\n          </label>\n          <label>\n            Phone:\n            <input [(ngModel)]="model.phoneNumber" name="phone" />\n          </label>\n          <legend>Company information</legend>\n          <label>\n            Company name:\n            <input [(ngModel)]="model.companyName" name="companyName" />\n          </label>\n          <label>\n            Street:\n            <input [(ngModel)]="model.streetName" name="streetName" />\n          </label>\n          <label>\n            City:\n            <input [(ngModel)]="model.city" name="city" />\n          </label>\n          <label>\n            Postal code:\n            <input [(ngModel)]="model.postalCode" name="state" />\n          </label>\n          <input type="submit" value="Submit" (click)="requestQuote()" />\n        </fieldset>\n      </form>\n    </div>\n\n    <div *ngIf="isSubmitted">\n      <h3>Thank you for your request!</h3>\n      <p>We will contact you shortly.</p>\n    </div>\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);